
Timers_GeneralPurposeTimerInterruptDMAMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002988  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002b10  08002b10  00012b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b28  08002b28  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b30  08002b30  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b30  08002b30  00012b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b34  08002b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000001c  08002b54  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002b54  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f75  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001597  00000000  00000000  00028fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  0002a558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f8  00000000  00000000  0002af08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fb57  00000000  00000000  0002b800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000070a3  00000000  00000000  0004b357  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c34c8  00000000  00000000  000523fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001158c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002810  00000000  00000000  00115940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002af8 	.word	0x08002af8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08002af8 	.word	0x08002af8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fb92 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f820 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f906 	bl	80006e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d8:	f000 f8e4 	bl	80006a4 <MX_DMA_Init>
  MX_TIM1_Init();
 80004dc:	f000 f88a 	bl	80005f4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80004e0:	4808      	ldr	r0, [pc, #32]	; (8000504 <main+0x3c>)
 80004e2:	f001 ff08 	bl	80022f6 <HAL_TIM_Base_Start_IT>
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)led_data, (uint32_t)&GPIOD->ODR, 8);
 80004e6:	4908      	ldr	r1, [pc, #32]	; (8000508 <main+0x40>)
 80004e8:	2308      	movs	r3, #8
 80004ea:	4a08      	ldr	r2, [pc, #32]	; (800050c <main+0x44>)
 80004ec:	4808      	ldr	r0, [pc, #32]	; (8000510 <main+0x48>)
 80004ee:	f000 fdb3 	bl	8001058 <HAL_DMA_Start_IT>
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80004f2:	4b04      	ldr	r3, [pc, #16]	; (8000504 <main+0x3c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	68da      	ldr	r2, [r3, #12]
 80004f8:	4b02      	ldr	r3, [pc, #8]	; (8000504 <main+0x3c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000500:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000502:	e7fe      	b.n	8000502 <main+0x3a>
 8000504:	2000003c 	.word	0x2000003c
 8000508:	20000000 	.word	0x20000000
 800050c:	40020c14 	.word	0x40020c14
 8000510:	2000007c 	.word	0x2000007c

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	2230      	movs	r2, #48	; 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f002 fae0 	bl	8002ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <SystemClock_Config+0xd8>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a2a      	ldr	r2, [pc, #168]	; (80005ec <SystemClock_Config+0xd8>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <SystemClock_Config+0xd8>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <SystemClock_Config+0xdc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a24      	ldr	r2, [pc, #144]	; (80005f0 <SystemClock_Config+0xdc>)
 800055e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xdc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000570:	2301      	movs	r3, #1
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000584:	2308      	movs	r3, #8
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000588:	23a8      	movs	r3, #168	; 0xa8
 800058a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000590:	2307      	movs	r3, #7
 8000592:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0320 	add.w	r3, r7, #32
 8000598:	4618      	mov	r0, r3
 800059a:	f001 f9eb 	bl	8001974 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a4:	f000 f9e0 	bl	8000968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2302      	movs	r3, #2
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2102      	movs	r1, #2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fc44 	bl	8001e54 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005d2:	f000 f9c9 	bl	8000968 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80005dc:	2001      	movs	r0, #1
 80005de:	f001 fd1f 	bl	8002020 <HAL_RCC_MCOConfig>
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fa:	f107 0308 	add.w	r3, r7, #8
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000608:	463b      	mov	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <MX_TIM1_Init+0xa8>)
 8000612:	4a23      	ldr	r2, [pc, #140]	; (80006a0 <MX_TIM1_Init+0xac>)
 8000614:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <MX_TIM1_Init+0xa8>)
 8000618:	f240 32e7 	movw	r2, #999	; 0x3e7
 800061c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061e:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_TIM1_Init+0xa8>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <MX_TIM1_Init+0xa8>)
 8000626:	f240 12f3 	movw	r2, #499	; 0x1f3
 800062a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_TIM1_Init+0xa8>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_TIM1_Init+0xa8>)
 8000634:	2201      	movs	r2, #1
 8000636:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_TIM1_Init+0xa8>)
 800063a:	2200      	movs	r2, #0
 800063c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800063e:	4817      	ldr	r0, [pc, #92]	; (800069c <MX_TIM1_Init+0xa8>)
 8000640:	f001 fe2e 	bl	80022a0 <HAL_TIM_Base_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800064a:	f000 f98d 	bl	8000968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800064e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000652:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV4;
 8000658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065c:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	4619      	mov	r1, r3
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <MX_TIM1_Init+0xa8>)
 800066a:	f001 ff70 	bl	800254e <HAL_TIM_ConfigClockSource>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000674:	f000 f978 	bl	8000968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000678:	2320      	movs	r3, #32
 800067a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_TIM1_Init+0xa8>)
 8000686:	f002 f97b 	bl	8002980 <HAL_TIMEx_MasterConfigSynchronization>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000690:	f000 f96a 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000003c 	.word	0x2000003c
 80006a0:	40010000 	.word	0x40010000

080006a4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_DMA_Init+0x3c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <MX_DMA_Init+0x3c>)
 80006b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_DMA_Init+0x3c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2044      	movs	r0, #68	; 0x44
 80006cc:	f000 fbdf 	bl	8000e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80006d0:	2044      	movs	r0, #68	; 0x44
 80006d2:	f000 fbf8 	bl	8000ec6 <HAL_NVIC_EnableIRQ>

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
 80006fe:	4b89      	ldr	r3, [pc, #548]	; (8000924 <MX_GPIO_Init+0x240>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a88      	ldr	r2, [pc, #544]	; (8000924 <MX_GPIO_Init+0x240>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b86      	ldr	r3, [pc, #536]	; (8000924 <MX_GPIO_Init+0x240>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	61bb      	str	r3, [r7, #24]
 8000714:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	4b82      	ldr	r3, [pc, #520]	; (8000924 <MX_GPIO_Init+0x240>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a81      	ldr	r2, [pc, #516]	; (8000924 <MX_GPIO_Init+0x240>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b7f      	ldr	r3, [pc, #508]	; (8000924 <MX_GPIO_Init+0x240>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b7b      	ldr	r3, [pc, #492]	; (8000924 <MX_GPIO_Init+0x240>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a7a      	ldr	r2, [pc, #488]	; (8000924 <MX_GPIO_Init+0x240>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b78      	ldr	r3, [pc, #480]	; (8000924 <MX_GPIO_Init+0x240>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b74      	ldr	r3, [pc, #464]	; (8000924 <MX_GPIO_Init+0x240>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a73      	ldr	r2, [pc, #460]	; (8000924 <MX_GPIO_Init+0x240>)
 8000758:	f043 0310 	orr.w	r3, r3, #16
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b71      	ldr	r3, [pc, #452]	; (8000924 <MX_GPIO_Init+0x240>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0310 	and.w	r3, r3, #16
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b6d      	ldr	r3, [pc, #436]	; (8000924 <MX_GPIO_Init+0x240>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a6c      	ldr	r2, [pc, #432]	; (8000924 <MX_GPIO_Init+0x240>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b6a      	ldr	r3, [pc, #424]	; (8000924 <MX_GPIO_Init+0x240>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b66      	ldr	r3, [pc, #408]	; (8000924 <MX_GPIO_Init+0x240>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a65      	ldr	r2, [pc, #404]	; (8000924 <MX_GPIO_Init+0x240>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b63      	ldr	r3, [pc, #396]	; (8000924 <MX_GPIO_Init+0x240>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OnBoardGreenLED_Pin|OnBoardOrangeLED_Pin|OnBoardRedLED_Pin|OnBoardBlueLED_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007a8:	485f      	ldr	r0, [pc, #380]	; (8000928 <MX_GPIO_Init+0x244>)
 80007aa:	f001 f8af 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TimerOutputUEV_GPIO_Port, TimerOutputUEV_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b4:	485d      	ldr	r0, [pc, #372]	; (800092c <MX_GPIO_Init+0x248>)
 80007b6:	f001 f8a9 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007ba:	2308      	movs	r3, #8
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ca:	2305      	movs	r3, #5
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4856      	ldr	r0, [pc, #344]	; (8000930 <MX_GPIO_Init+0x24c>)
 80007d6:	f000 feff 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007da:	2310      	movs	r3, #16
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007ea:	2306      	movs	r3, #6
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	484d      	ldr	r0, [pc, #308]	; (800092c <MX_GPIO_Init+0x248>)
 80007f6:	f000 feef 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007fa:	23e0      	movs	r3, #224	; 0xe0
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800080a:	2305      	movs	r3, #5
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4845      	ldr	r0, [pc, #276]	; (800092c <MX_GPIO_Init+0x248>)
 8000816:	f000 fedf 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800081a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800082c:	2305      	movs	r3, #5
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	483f      	ldr	r0, [pc, #252]	; (8000934 <MX_GPIO_Init+0x250>)
 8000838:	f000 fece 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OnBoardGreenLED_Pin OnBoardOrangeLED_Pin OnBoardRedLED_Pin OnBoardBlueLED_Pin */
  GPIO_InitStruct.Pin = OnBoardGreenLED_Pin|OnBoardOrangeLED_Pin|OnBoardRedLED_Pin|OnBoardBlueLED_Pin;
 800083c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4834      	ldr	r0, [pc, #208]	; (8000928 <MX_GPIO_Init+0x244>)
 8000856:	f000 febf 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800085a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800086c:	2306      	movs	r3, #6
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	482e      	ldr	r0, [pc, #184]	; (8000930 <MX_GPIO_Init+0x24c>)
 8000878:	f000 feae 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800087c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800088e:	2300      	movs	r3, #0
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4825      	ldr	r0, [pc, #148]	; (8000930 <MX_GPIO_Init+0x24c>)
 800089a:	f000 fe9d 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TimerOutputUEV_Pin */
  GPIO_InitStruct.Pin = TimerOutputUEV_Pin;
 800089e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TimerOutputUEV_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	481d      	ldr	r0, [pc, #116]	; (800092c <MX_GPIO_Init+0x248>)
 80008b8:	f000 fe8e 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4816      	ldr	r0, [pc, #88]	; (800092c <MX_GPIO_Init+0x248>)
 80008d2:	f000 fe81 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008e8:	230a      	movs	r3, #10
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	480e      	ldr	r0, [pc, #56]	; (800092c <MX_GPIO_Init+0x248>)
 80008f4:	f000 fe70 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008f8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fe:	2312      	movs	r3, #18
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000902:	2301      	movs	r3, #1
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800090a:	2304      	movs	r3, #4
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4807      	ldr	r0, [pc, #28]	; (8000934 <MX_GPIO_Init+0x250>)
 8000916:	f000 fe5f 	bl	80015d8 <HAL_GPIO_Init>

}
 800091a:	bf00      	nop
 800091c:	3730      	adds	r7, #48	; 0x30
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40020c00 	.word	0x40020c00
 800092c:	40020000 	.word	0x40020000
 8000930:	40020800 	.word	0x40020800
 8000934:	40020400 	.word	0x40020400

08000938 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	counter++;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800094a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(TimerOutputUEV_GPIO_Port, TimerOutputUEV_Pin);
 800094c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000952:	f000 fff4 	bl	800193e <HAL_GPIO_TogglePin>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000038 	.word	0x20000038
 8000964:	40020000 	.word	0x40020000

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009b6:	2007      	movs	r0, #7
 80009b8:	f000 fa5e 	bl	8000e78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a35      	ldr	r2, [pc, #212]	; (8000abc <HAL_TIM_Base_MspInit+0xf4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d164      	bne.n	8000ab4 <HAL_TIM_Base_MspInit+0xec>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b34      	ldr	r3, [pc, #208]	; (8000ac0 <HAL_TIM_Base_MspInit+0xf8>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a33      	ldr	r2, [pc, #204]	; (8000ac0 <HAL_TIM_Base_MspInit+0xf8>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b31      	ldr	r3, [pc, #196]	; (8000ac0 <HAL_TIM_Base_MspInit+0xf8>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <HAL_TIM_Base_MspInit+0xf8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a2c      	ldr	r2, [pc, #176]	; (8000ac0 <HAL_TIM_Base_MspInit+0xf8>)
 8000a10:	f043 0310 	orr.w	r3, r3, #16
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <HAL_TIM_Base_MspInit+0xf8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0310 	and.w	r3, r3, #16
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PE7     ------> TIM1_ETR 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a22:	2380      	movs	r3, #128	; 0x80
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4821      	ldr	r0, [pc, #132]	; (8000ac4 <HAL_TIM_Base_MspInit+0xfc>)
 8000a3e:	f000 fdcb 	bl	80015d8 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <HAL_TIM_Base_MspInit+0x100>)
 8000a44:	4a21      	ldr	r2, [pc, #132]	; (8000acc <HAL_TIM_Base_MspInit+0x104>)
 8000a46:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <HAL_TIM_Base_MspInit+0x100>)
 8000a4a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000a4e:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a50:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <HAL_TIM_Base_MspInit+0x100>)
 8000a52:	2240      	movs	r2, #64	; 0x40
 8000a54:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <HAL_TIM_Base_MspInit+0x100>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <HAL_TIM_Base_MspInit+0x100>)
 8000a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a62:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <HAL_TIM_Base_MspInit+0x100>)
 8000a66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a6a:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <HAL_TIM_Base_MspInit+0x100>)
 8000a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a72:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <HAL_TIM_Base_MspInit+0x100>)
 8000a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a7a:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_TIM_Base_MspInit+0x100>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <HAL_TIM_Base_MspInit+0x100>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000a88:	480f      	ldr	r0, [pc, #60]	; (8000ac8 <HAL_TIM_Base_MspInit+0x100>)
 8000a8a:	f000 fa37 	bl	8000efc <HAL_DMA_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8000a94:	f7ff ff68 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <HAL_TIM_Base_MspInit+0x100>)
 8000a9c:	621a      	str	r2, [r3, #32]
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <HAL_TIM_Base_MspInit+0x100>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2019      	movs	r0, #25
 8000aaa:	f000 f9f0 	bl	8000e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000aae:	2019      	movs	r0, #25
 8000ab0:	f000 fa09 	bl	8000ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40010000 	.word	0x40010000
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	2000007c 	.word	0x2000007c
 8000acc:	40026488 	.word	0x40026488

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b24:	f000 f8b8 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	another_counter++;
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000b3a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <TIM1_UP_TIM10_IRQHandler+0x20>)
 8000b3e:	f001 fbfe 	bl	800233e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000dd 	.word	0x200000dd
 8000b4c:	2000003c 	.word	0x2000003c

08000b50 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
	dma_counter++;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <DMA2_Stream5_IRQHandler+0x1c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <DMA2_Stream5_IRQHandler+0x1c>)
 8000b5e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000b60:	4803      	ldr	r0, [pc, #12]	; (8000b70 <DMA2_Stream5_IRQHandler+0x20>)
 8000b62:	f000 fad1 	bl	8001108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000dc 	.word	0x200000dc
 8000b70:	2000007c 	.word	0x2000007c

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <SystemInit+0x28>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <SystemInit+0x28>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <SystemInit+0x28>)
 8000b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ba4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ba6:	e003      	b.n	8000bb0 <LoopCopyDataInit>

08000ba8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000baa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bae:	3104      	adds	r1, #4

08000bb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bb8:	d3f6      	bcc.n	8000ba8 <CopyDataInit>
  ldr  r2, =_sbss
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bbc:	e002      	b.n	8000bc4 <LoopFillZerobss>

08000bbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bc0:	f842 3b04 	str.w	r3, [r2], #4

08000bc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bc8:	d3f9      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bca:	f7ff ffd3 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f001 ff67 	bl	8002aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fc79 	bl	80004c8 <main>
  bx  lr    
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bdc:	08002b38 	.word	0x08002b38
  ldr  r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000be4:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000be8:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000bec:	200000e4 	.word	0x200000e4

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <HAL_Init+0x40>)
 8000bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_Init+0x40>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_Init+0x40>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f92b 	bl	8000e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 f808 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fea6 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023c00 	.word	0x40023c00

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f943 	bl	8000ee2 <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f90b 	bl	8000e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000010 	.word	0x20000010
 8000c90:	20000018 	.word	0x20000018
 8000c94:	20000014 	.word	0x20000014

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000018 	.word	0x20000018
 8000cbc:	200000e0 	.word	0x200000e0

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	200000e0 	.word	0x200000e0

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db0b      	blt.n	8000d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 021f 	and.w	r2, r3, #31
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <__NVIC_EnableIRQ+0x38>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e44:	d301      	bcc.n	8000e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00f      	b.n	8000e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <SysTick_Config+0x40>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e52:	210f      	movs	r1, #15
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f7ff ff8e 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SysTick_Config+0x40>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <SysTick_Config+0x40>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff29 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea0:	f7ff ff3e 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	6978      	ldr	r0, [r7, #20]
 8000eac:	f7ff ff8e 	bl	8000dcc <NVIC_EncodePriority>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff5d 	bl	8000d78 <__NVIC_SetPriority>
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff31 	bl	8000d3c <__NVIC_EnableIRQ>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffa2 	bl	8000e34 <SysTick_Config>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff feda 	bl	8000cc0 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e099      	b.n	800104c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2202      	movs	r2, #2
 8000f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0201 	bic.w	r2, r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f38:	e00f      	b.n	8000f5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f3a:	f7ff fec1 	bl	8000cc0 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b05      	cmp	r3, #5
 8000f46:	d908      	bls.n	8000f5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2203      	movs	r2, #3
 8000f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e078      	b.n	800104c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1e8      	bne.n	8000f3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	4b38      	ldr	r3, [pc, #224]	; (8001054 <HAL_DMA_Init+0x158>)
 8000f74:	4013      	ands	r3, r2
 8000f76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d107      	bne.n	8000fc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f023 0307 	bic.w	r3, r3, #7
 8000fda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	d117      	bne.n	800101e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00e      	beq.n	800101e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 fa6f 	bl	80014e4 <DMA_CheckFifoParam>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d008      	beq.n	800101e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2240      	movs	r2, #64	; 0x40
 8001010:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800101a:	2301      	movs	r3, #1
 800101c:	e016      	b.n	800104c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fa26 	bl	8001478 <DMA_CalcBaseAndBitshift>
 800102c:	4603      	mov	r3, r0
 800102e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001034:	223f      	movs	r2, #63	; 0x3f
 8001036:	409a      	lsls	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	f010803f 	.word	0xf010803f

08001058 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_DMA_Start_IT+0x26>
 800107a:	2302      	movs	r3, #2
 800107c:	e040      	b.n	8001100 <HAL_DMA_Start_IT+0xa8>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d12f      	bne.n	80010f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2202      	movs	r2, #2
 8001096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f000 f9b8 	bl	800141c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b0:	223f      	movs	r2, #63	; 0x3f
 80010b2:	409a      	lsls	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0216 	orr.w	r2, r2, #22
 80010c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d007      	beq.n	80010e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0208 	orr.w	r2, r2, #8
 80010de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0201 	orr.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e005      	b.n	80010fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80010fa:	2302      	movs	r3, #2
 80010fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001114:	4b92      	ldr	r3, [pc, #584]	; (8001360 <HAL_DMA_IRQHandler+0x258>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a92      	ldr	r2, [pc, #584]	; (8001364 <HAL_DMA_IRQHandler+0x25c>)
 800111a:	fba2 2303 	umull	r2, r3, r2, r3
 800111e:	0a9b      	lsrs	r3, r3, #10
 8001120:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001132:	2208      	movs	r2, #8
 8001134:	409a      	lsls	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4013      	ands	r3, r2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d01a      	beq.n	8001174 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b00      	cmp	r3, #0
 800114a:	d013      	beq.n	8001174 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0204 	bic.w	r2, r2, #4
 800115a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001160:	2208      	movs	r2, #8
 8001162:	409a      	lsls	r2, r3
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800116c:	f043 0201 	orr.w	r2, r3, #1
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001178:	2201      	movs	r2, #1
 800117a:	409a      	lsls	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4013      	ands	r3, r2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d012      	beq.n	80011aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001196:	2201      	movs	r2, #1
 8001198:	409a      	lsls	r2, r3
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a2:	f043 0202 	orr.w	r2, r3, #2
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ae:	2204      	movs	r2, #4
 80011b0:	409a      	lsls	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d012      	beq.n	80011e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00b      	beq.n	80011e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011cc:	2204      	movs	r2, #4
 80011ce:	409a      	lsls	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d8:	f043 0204 	orr.w	r2, r3, #4
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e4:	2210      	movs	r2, #16
 80011e6:	409a      	lsls	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d043      	beq.n	8001278 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d03c      	beq.n	8001278 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001202:	2210      	movs	r2, #16
 8001204:	409a      	lsls	r2, r3
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d018      	beq.n	800124a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d108      	bne.n	8001238 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	2b00      	cmp	r3, #0
 800122c:	d024      	beq.n	8001278 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	4798      	blx	r3
 8001236:	e01f      	b.n	8001278 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800123c:	2b00      	cmp	r3, #0
 800123e:	d01b      	beq.n	8001278 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	4798      	blx	r3
 8001248:	e016      	b.n	8001278 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001254:	2b00      	cmp	r3, #0
 8001256:	d107      	bne.n	8001268 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0208 	bic.w	r2, r2, #8
 8001266:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127c:	2220      	movs	r2, #32
 800127e:	409a      	lsls	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4013      	ands	r3, r2
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 808e 	beq.w	80013a6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0310 	and.w	r3, r3, #16
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 8086 	beq.w	80013a6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129e:	2220      	movs	r2, #32
 80012a0:	409a      	lsls	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b05      	cmp	r3, #5
 80012b0:	d136      	bne.n	8001320 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0216 	bic.w	r2, r2, #22
 80012c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	695a      	ldr	r2, [r3, #20]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d103      	bne.n	80012e2 <HAL_DMA_IRQHandler+0x1da>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0208 	bic.w	r2, r2, #8
 80012f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f6:	223f      	movs	r2, #63	; 0x3f
 80012f8:	409a      	lsls	r2, r3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001312:	2b00      	cmp	r3, #0
 8001314:	d07d      	beq.n	8001412 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	4798      	blx	r3
        }
        return;
 800131e:	e078      	b.n	8001412 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01c      	beq.n	8001368 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d108      	bne.n	800134e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001340:	2b00      	cmp	r3, #0
 8001342:	d030      	beq.n	80013a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	4798      	blx	r3
 800134c:	e02b      	b.n	80013a6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001352:	2b00      	cmp	r3, #0
 8001354:	d027      	beq.n	80013a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	4798      	blx	r3
 800135e:	e022      	b.n	80013a6 <HAL_DMA_IRQHandler+0x29e>
 8001360:	20000010 	.word	0x20000010
 8001364:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10f      	bne.n	8001396 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0210 	bic.w	r2, r2, #16
 8001384:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d032      	beq.n	8001414 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d022      	beq.n	8001400 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2205      	movs	r2, #5
 80013be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0201 	bic.w	r2, r2, #1
 80013d0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	3301      	adds	r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d307      	bcc.n	80013ee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f2      	bne.n	80013d2 <HAL_DMA_IRQHandler+0x2ca>
 80013ec:	e000      	b.n	80013f0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80013ee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	4798      	blx	r3
 8001410:	e000      	b.n	8001414 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001412:	bf00      	nop
    }
  }
}
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop

0800141c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001438:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b40      	cmp	r3, #64	; 0x40
 8001448:	d108      	bne.n	800145c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800145a:	e007      	b.n	800146c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	60da      	str	r2, [r3, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	3b10      	subs	r3, #16
 8001488:	4a14      	ldr	r2, [pc, #80]	; (80014dc <DMA_CalcBaseAndBitshift+0x64>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001492:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <DMA_CalcBaseAndBitshift+0x68>)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d909      	bls.n	80014ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014ae:	f023 0303 	bic.w	r3, r3, #3
 80014b2:	1d1a      	adds	r2, r3, #4
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	659a      	str	r2, [r3, #88]	; 0x58
 80014b8:	e007      	b.n	80014ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014c2:	f023 0303 	bic.w	r3, r3, #3
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	aaaaaaab 	.word	0xaaaaaaab
 80014e0:	08002b20 	.word	0x08002b20

080014e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d11f      	bne.n	800153e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b03      	cmp	r3, #3
 8001502:	d855      	bhi.n	80015b0 <DMA_CheckFifoParam+0xcc>
 8001504:	a201      	add	r2, pc, #4	; (adr r2, 800150c <DMA_CheckFifoParam+0x28>)
 8001506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150a:	bf00      	nop
 800150c:	0800151d 	.word	0x0800151d
 8001510:	0800152f 	.word	0x0800152f
 8001514:	0800151d 	.word	0x0800151d
 8001518:	080015b1 	.word	0x080015b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d045      	beq.n	80015b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800152c:	e042      	b.n	80015b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001532:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001536:	d13f      	bne.n	80015b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800153c:	e03c      	b.n	80015b8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001546:	d121      	bne.n	800158c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b03      	cmp	r3, #3
 800154c:	d836      	bhi.n	80015bc <DMA_CheckFifoParam+0xd8>
 800154e:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <DMA_CheckFifoParam+0x70>)
 8001550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001554:	08001565 	.word	0x08001565
 8001558:	0800156b 	.word	0x0800156b
 800155c:	08001565 	.word	0x08001565
 8001560:	0800157d 	.word	0x0800157d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
      break;
 8001568:	e02f      	b.n	80015ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d024      	beq.n	80015c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800157a:	e021      	b.n	80015c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001584:	d11e      	bne.n	80015c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800158a:	e01b      	b.n	80015c4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d902      	bls.n	8001598 <DMA_CheckFifoParam+0xb4>
 8001592:	2b03      	cmp	r3, #3
 8001594:	d003      	beq.n	800159e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001596:	e018      	b.n	80015ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
      break;
 800159c:	e015      	b.n	80015ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00e      	beq.n	80015c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
      break;
 80015ae:	e00b      	b.n	80015c8 <DMA_CheckFifoParam+0xe4>
      break;
 80015b0:	bf00      	nop
 80015b2:	e00a      	b.n	80015ca <DMA_CheckFifoParam+0xe6>
      break;
 80015b4:	bf00      	nop
 80015b6:	e008      	b.n	80015ca <DMA_CheckFifoParam+0xe6>
      break;
 80015b8:	bf00      	nop
 80015ba:	e006      	b.n	80015ca <DMA_CheckFifoParam+0xe6>
      break;
 80015bc:	bf00      	nop
 80015be:	e004      	b.n	80015ca <DMA_CheckFifoParam+0xe6>
      break;
 80015c0:	bf00      	nop
 80015c2:	e002      	b.n	80015ca <DMA_CheckFifoParam+0xe6>
      break;   
 80015c4:	bf00      	nop
 80015c6:	e000      	b.n	80015ca <DMA_CheckFifoParam+0xe6>
      break;
 80015c8:	bf00      	nop
    }
  } 
  
  return status; 
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	e16b      	b.n	80018cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f4:	2201      	movs	r2, #1
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	429a      	cmp	r2, r3
 800160e:	f040 815a 	bne.w	80018c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d00b      	beq.n	8001632 <HAL_GPIO_Init+0x5a>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d007      	beq.n	8001632 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001626:	2b11      	cmp	r3, #17
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b12      	cmp	r3, #18
 8001630:	d130      	bne.n	8001694 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	2203      	movs	r2, #3
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001668:	2201      	movs	r2, #1
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	f003 0201 	and.w	r2, r3, #1
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0xfc>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b12      	cmp	r3, #18
 80016d2:	d123      	bne.n	800171c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	08da      	lsrs	r2, r3, #3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3208      	adds	r2, #8
 80016dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	08da      	lsrs	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3208      	adds	r2, #8
 8001716:	69b9      	ldr	r1, [r7, #24]
 8001718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0203 	and.w	r2, r3, #3
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80b4 	beq.w	80018c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b5f      	ldr	r3, [pc, #380]	; (80018e0 <HAL_GPIO_Init+0x308>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	4a5e      	ldr	r2, [pc, #376]	; (80018e0 <HAL_GPIO_Init+0x308>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176c:	6453      	str	r3, [r2, #68]	; 0x44
 800176e:	4b5c      	ldr	r3, [pc, #368]	; (80018e0 <HAL_GPIO_Init+0x308>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800177a:	4a5a      	ldr	r2, [pc, #360]	; (80018e4 <HAL_GPIO_Init+0x30c>)
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3302      	adds	r3, #2
 8001782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	220f      	movs	r2, #15
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a51      	ldr	r2, [pc, #324]	; (80018e8 <HAL_GPIO_Init+0x310>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d02b      	beq.n	80017fe <HAL_GPIO_Init+0x226>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a50      	ldr	r2, [pc, #320]	; (80018ec <HAL_GPIO_Init+0x314>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d025      	beq.n	80017fa <HAL_GPIO_Init+0x222>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4f      	ldr	r2, [pc, #316]	; (80018f0 <HAL_GPIO_Init+0x318>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d01f      	beq.n	80017f6 <HAL_GPIO_Init+0x21e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4e      	ldr	r2, [pc, #312]	; (80018f4 <HAL_GPIO_Init+0x31c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d019      	beq.n	80017f2 <HAL_GPIO_Init+0x21a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4d      	ldr	r2, [pc, #308]	; (80018f8 <HAL_GPIO_Init+0x320>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0x216>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4c      	ldr	r2, [pc, #304]	; (80018fc <HAL_GPIO_Init+0x324>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00d      	beq.n	80017ea <HAL_GPIO_Init+0x212>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4b      	ldr	r2, [pc, #300]	; (8001900 <HAL_GPIO_Init+0x328>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d007      	beq.n	80017e6 <HAL_GPIO_Init+0x20e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4a      	ldr	r2, [pc, #296]	; (8001904 <HAL_GPIO_Init+0x32c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d101      	bne.n	80017e2 <HAL_GPIO_Init+0x20a>
 80017de:	2307      	movs	r3, #7
 80017e0:	e00e      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017e2:	2308      	movs	r3, #8
 80017e4:	e00c      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017e6:	2306      	movs	r3, #6
 80017e8:	e00a      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017ea:	2305      	movs	r3, #5
 80017ec:	e008      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017ee:	2304      	movs	r3, #4
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017f2:	2303      	movs	r3, #3
 80017f4:	e004      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_GPIO_Init+0x228>
 80017fe:	2300      	movs	r3, #0
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	f002 0203 	and.w	r2, r2, #3
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	4093      	lsls	r3, r2
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001810:	4934      	ldr	r1, [pc, #208]	; (80018e4 <HAL_GPIO_Init+0x30c>)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181e:	4b3a      	ldr	r3, [pc, #232]	; (8001908 <HAL_GPIO_Init+0x330>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001842:	4a31      	ldr	r2, [pc, #196]	; (8001908 <HAL_GPIO_Init+0x330>)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001848:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <HAL_GPIO_Init+0x330>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800186c:	4a26      	ldr	r2, [pc, #152]	; (8001908 <HAL_GPIO_Init+0x330>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001872:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_GPIO_Init+0x330>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001896:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <HAL_GPIO_Init+0x330>)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <HAL_GPIO_Init+0x330>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c0:	4a11      	ldr	r2, [pc, #68]	; (8001908 <HAL_GPIO_Init+0x330>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3301      	adds	r3, #1
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	f67f ae90 	bls.w	80015f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018d4:	bf00      	nop
 80018d6:	3724      	adds	r7, #36	; 0x24
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40013800 	.word	0x40013800
 80018e8:	40020000 	.word	0x40020000
 80018ec:	40020400 	.word	0x40020400
 80018f0:	40020800 	.word	0x40020800
 80018f4:	40020c00 	.word	0x40020c00
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40021400 	.word	0x40021400
 8001900:	40021800 	.word	0x40021800
 8001904:	40021c00 	.word	0x40021c00
 8001908:	40013c00 	.word	0x40013c00

0800190c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
 8001918:	4613      	mov	r3, r2
 800191a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001928:	e003      	b.n	8001932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	041a      	lsls	r2, r3, #16
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	619a      	str	r2, [r3, #24]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	401a      	ands	r2, r3
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	429a      	cmp	r2, r3
 8001956:	d104      	bne.n	8001962 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	041a      	lsls	r2, r3, #16
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001960:	e002      	b.n	8001968 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001962:	887a      	ldrh	r2, [r7, #2]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	619a      	str	r2, [r3, #24]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e25b      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d075      	beq.n	8001a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001992:	4ba3      	ldr	r3, [pc, #652]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b04      	cmp	r3, #4
 800199c:	d00c      	beq.n	80019b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199e:	4ba0      	ldr	r3, [pc, #640]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d112      	bne.n	80019d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019aa:	4b9d      	ldr	r3, [pc, #628]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b6:	d10b      	bne.n	80019d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	4b99      	ldr	r3, [pc, #612]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d05b      	beq.n	8001a7c <HAL_RCC_OscConfig+0x108>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d157      	bne.n	8001a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e236      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d8:	d106      	bne.n	80019e8 <HAL_RCC_OscConfig+0x74>
 80019da:	4b91      	ldr	r3, [pc, #580]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a90      	ldr	r2, [pc, #576]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e01d      	b.n	8001a24 <HAL_RCC_OscConfig+0xb0>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x98>
 80019f2:	4b8b      	ldr	r3, [pc, #556]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a8a      	ldr	r2, [pc, #552]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b88      	ldr	r3, [pc, #544]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a87      	ldr	r2, [pc, #540]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0xb0>
 8001a0c:	4b84      	ldr	r3, [pc, #528]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a83      	ldr	r2, [pc, #524]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b81      	ldr	r3, [pc, #516]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a80      	ldr	r2, [pc, #512]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d013      	beq.n	8001a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f948 	bl	8000cc0 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff f944 	bl	8000cc0 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e1fb      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b76      	ldr	r3, [pc, #472]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0xc0>
 8001a52:	e014      	b.n	8001a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff f934 	bl	8000cc0 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff f930 	bl	8000cc0 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e1e7      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	4b6c      	ldr	r3, [pc, #432]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0xe8>
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d063      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a8a:	4b65      	ldr	r3, [pc, #404]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00b      	beq.n	8001aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a96:	4b62      	ldr	r3, [pc, #392]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d11c      	bne.n	8001adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa2:	4b5f      	ldr	r3, [pc, #380]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d116      	bne.n	8001adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aae:	4b5c      	ldr	r3, [pc, #368]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x152>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e1bb      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac6:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4952      	ldr	r1, [pc, #328]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	e03a      	b.n	8001b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d020      	beq.n	8001b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae4:	4b4f      	ldr	r3, [pc, #316]	; (8001c24 <HAL_RCC_OscConfig+0x2b0>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff f8e9 	bl	8000cc0 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff f8e5 	bl	8000cc0 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e19c      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4940      	ldr	r1, [pc, #256]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
 8001b24:	e015      	b.n	8001b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b26:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <HAL_RCC_OscConfig+0x2b0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f8c8 	bl	8000cc0 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b34:	f7ff f8c4 	bl	8000cc0 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e17b      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b46:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d030      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d016      	beq.n	8001b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b66:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <HAL_RCC_OscConfig+0x2b4>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff f8a8 	bl	8000cc0 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b74:	f7ff f8a4 	bl	8000cc0 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e15b      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x200>
 8001b92:	e015      	b.n	8001bc0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_RCC_OscConfig+0x2b4>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f891 	bl	8000cc0 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba2:	f7ff f88d 	bl	8000cc0 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e144      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a0 	beq.w	8001d0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10f      	bne.n	8001bfe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_OscConfig+0x2b8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d121      	bne.n	8001c4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_RCC_OscConfig+0x2b8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_RCC_OscConfig+0x2b8>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c16:	f7ff f853 	bl	8000cc0 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1c:	e011      	b.n	8001c42 <HAL_RCC_OscConfig+0x2ce>
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	42470000 	.word	0x42470000
 8001c28:	42470e80 	.word	0x42470e80
 8001c2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c30:	f7ff f846 	bl	8000cc0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e0fd      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c42:	4b81      	ldr	r3, [pc, #516]	; (8001e48 <HAL_RCC_OscConfig+0x4d4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d106      	bne.n	8001c64 <HAL_RCC_OscConfig+0x2f0>
 8001c56:	4b7d      	ldr	r3, [pc, #500]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	4a7c      	ldr	r2, [pc, #496]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6713      	str	r3, [r2, #112]	; 0x70
 8001c62:	e01c      	b.n	8001c9e <HAL_RCC_OscConfig+0x32a>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b05      	cmp	r3, #5
 8001c6a:	d10c      	bne.n	8001c86 <HAL_RCC_OscConfig+0x312>
 8001c6c:	4b77      	ldr	r3, [pc, #476]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	4a76      	ldr	r2, [pc, #472]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6713      	str	r3, [r2, #112]	; 0x70
 8001c78:	4b74      	ldr	r3, [pc, #464]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7c:	4a73      	ldr	r2, [pc, #460]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6713      	str	r3, [r2, #112]	; 0x70
 8001c84:	e00b      	b.n	8001c9e <HAL_RCC_OscConfig+0x32a>
 8001c86:	4b71      	ldr	r3, [pc, #452]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8a:	4a70      	ldr	r2, [pc, #448]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	6713      	str	r3, [r2, #112]	; 0x70
 8001c92:	4b6e      	ldr	r3, [pc, #440]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	4a6d      	ldr	r2, [pc, #436]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c98:	f023 0304 	bic.w	r3, r3, #4
 8001c9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d015      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca6:	f7ff f80b 	bl	8000cc0 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f7ff f807 	bl	8000cc0 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e0bc      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc4:	4b61      	ldr	r3, [pc, #388]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0ee      	beq.n	8001cae <HAL_RCC_OscConfig+0x33a>
 8001cd0:	e014      	b.n	8001cfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd2:	f7fe fff5 	bl	8000cc0 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7fe fff1 	bl	8000cc0 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e0a6      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf0:	4b56      	ldr	r3, [pc, #344]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ee      	bne.n	8001cda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cfc:	7dfb      	ldrb	r3, [r7, #23]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d105      	bne.n	8001d0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d02:	4b52      	ldr	r3, [pc, #328]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4a51      	ldr	r2, [pc, #324]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8092 	beq.w	8001e3c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d18:	4b4c      	ldr	r3, [pc, #304]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d05c      	beq.n	8001dde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d141      	bne.n	8001db0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2c:	4b48      	ldr	r3, [pc, #288]	; (8001e50 <HAL_RCC_OscConfig+0x4dc>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7fe ffc5 	bl	8000cc0 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7fe ffc1 	bl	8000cc0 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e078      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4c:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f0      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69da      	ldr	r2, [r3, #28]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	019b      	lsls	r3, r3, #6
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	085b      	lsrs	r3, r3, #1
 8001d70:	3b01      	subs	r3, #1
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	061b      	lsls	r3, r3, #24
 8001d7c:	4933      	ldr	r1, [pc, #204]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d82:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_RCC_OscConfig+0x4dc>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7fe ff9a 	bl	8000cc0 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d90:	f7fe ff96 	bl	8000cc0 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e04d      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da2:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x41c>
 8001dae:	e045      	b.n	8001e3c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <HAL_RCC_OscConfig+0x4dc>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7fe ff83 	bl	8000cc0 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dbe:	f7fe ff7f 	bl	8000cc0 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e036      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCC_OscConfig+0x44a>
 8001ddc:	e02e      	b.n	8001e3c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e029      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d11c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d115      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e12:	4013      	ands	r3, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d10d      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d106      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40007000 	.word	0x40007000
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	42470060 	.word	0x42470060

08001e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0cc      	b.n	8002002 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e68:	4b68      	ldr	r3, [pc, #416]	; (800200c <HAL_RCC_ClockConfig+0x1b8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d90c      	bls.n	8001e90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b65      	ldr	r3, [pc, #404]	; (800200c <HAL_RCC_ClockConfig+0x1b8>)
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b63      	ldr	r3, [pc, #396]	; (800200c <HAL_RCC_ClockConfig+0x1b8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0b8      	b.n	8002002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d020      	beq.n	8001ede <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea8:	4b59      	ldr	r3, [pc, #356]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4a58      	ldr	r2, [pc, #352]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec0:	4b53      	ldr	r3, [pc, #332]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4a52      	ldr	r2, [pc, #328]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ecc:	4b50      	ldr	r3, [pc, #320]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	494d      	ldr	r1, [pc, #308]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d044      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	4b47      	ldr	r3, [pc, #284]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d119      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e07f      	b.n	8002002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f12:	4b3f      	ldr	r3, [pc, #252]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d109      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e06f      	b.n	8002002 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f22:	4b3b      	ldr	r3, [pc, #236]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e067      	b.n	8002002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f32:	4b37      	ldr	r3, [pc, #220]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f023 0203 	bic.w	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4934      	ldr	r1, [pc, #208]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f44:	f7fe febc 	bl	8000cc0 <HAL_GetTick>
 8001f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4a:	e00a      	b.n	8001f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4c:	f7fe feb8 	bl	8000cc0 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e04f      	b.n	8002002 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 020c 	and.w	r2, r3, #12
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d1eb      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <HAL_RCC_ClockConfig+0x1b8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d20c      	bcs.n	8001f9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b22      	ldr	r3, [pc, #136]	; (800200c <HAL_RCC_ClockConfig+0x1b8>)
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <HAL_RCC_ClockConfig+0x1b8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e032      	b.n	8002002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	4916      	ldr	r1, [pc, #88]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d009      	beq.n	8001fda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	490e      	ldr	r1, [pc, #56]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fda:	f000 f889 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8001fde:	4601      	mov	r1, r0
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	5cd3      	ldrb	r3, [r2, r3]
 8001fee:	fa21 f303 	lsr.w	r3, r1, r3
 8001ff2:	4a09      	ldr	r2, [pc, #36]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <HAL_RCC_ClockConfig+0x1c8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fe1c 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023c00 	.word	0x40023c00
 8002010:	40023800 	.word	0x40023800
 8002014:	08002b10 	.word	0x08002b10
 8002018:	20000010 	.word	0x20000010
 800201c:	20000014 	.word	0x20000014

08002020 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08c      	sub	sp, #48	; 0x30
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d129      	bne.n	8002086 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_RCC_MCOConfig+0xc4>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a2a      	ldr	r2, [pc, #168]	; (80020e4 <HAL_RCC_MCOConfig+0xc4>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <HAL_RCC_MCOConfig+0xc4>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800204e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002060:	2300      	movs	r3, #0
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	481f      	ldr	r0, [pc, #124]	; (80020e8 <HAL_RCC_MCOConfig+0xc8>)
 800206c:	f7ff fab4 	bl	80015d8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002070:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <HAL_RCC_MCOConfig+0xc4>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	430b      	orrs	r3, r1
 800207e:	4919      	ldr	r1, [pc, #100]	; (80020e4 <HAL_RCC_MCOConfig+0xc4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002084:	e029      	b.n	80020da <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <HAL_RCC_MCOConfig+0xc4>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a15      	ldr	r2, [pc, #84]	; (80020e4 <HAL_RCC_MCOConfig+0xc4>)
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <HAL_RCC_MCOConfig+0xc4>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80020a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	4619      	mov	r1, r3
 80020be:	480b      	ldr	r0, [pc, #44]	; (80020ec <HAL_RCC_MCOConfig+0xcc>)
 80020c0:	f7ff fa8a 	bl	80015d8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <HAL_RCC_MCOConfig+0xc4>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	00d9      	lsls	r1, r3, #3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	430b      	orrs	r3, r1
 80020d4:	4903      	ldr	r1, [pc, #12]	; (80020e4 <HAL_RCC_MCOConfig+0xc4>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
}
 80020da:	bf00      	nop
 80020dc:	3730      	adds	r7, #48	; 0x30
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020000 	.word	0x40020000
 80020ec:	40020800 	.word	0x40020800

080020f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	2300      	movs	r3, #0
 8002100:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002106:	4b63      	ldr	r3, [pc, #396]	; (8002294 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b04      	cmp	r3, #4
 8002110:	d007      	beq.n	8002122 <HAL_RCC_GetSysClockFreq+0x32>
 8002112:	2b08      	cmp	r3, #8
 8002114:	d008      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x38>
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 80b4 	bne.w	8002284 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800211c:	4b5e      	ldr	r3, [pc, #376]	; (8002298 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800211e:	60bb      	str	r3, [r7, #8]
       break;
 8002120:	e0b3      	b.n	800228a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002122:	4b5e      	ldr	r3, [pc, #376]	; (800229c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002124:	60bb      	str	r3, [r7, #8]
      break;
 8002126:	e0b0      	b.n	800228a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002128:	4b5a      	ldr	r3, [pc, #360]	; (8002294 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002130:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002132:	4b58      	ldr	r3, [pc, #352]	; (8002294 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d04a      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800213e:	4b55      	ldr	r3, [pc, #340]	; (8002294 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	099b      	lsrs	r3, r3, #6
 8002144:	f04f 0400 	mov.w	r4, #0
 8002148:	f240 11ff 	movw	r1, #511	; 0x1ff
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	ea03 0501 	and.w	r5, r3, r1
 8002154:	ea04 0602 	and.w	r6, r4, r2
 8002158:	4629      	mov	r1, r5
 800215a:	4632      	mov	r2, r6
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	f04f 0400 	mov.w	r4, #0
 8002164:	0154      	lsls	r4, r2, #5
 8002166:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800216a:	014b      	lsls	r3, r1, #5
 800216c:	4619      	mov	r1, r3
 800216e:	4622      	mov	r2, r4
 8002170:	1b49      	subs	r1, r1, r5
 8002172:	eb62 0206 	sbc.w	r2, r2, r6
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	f04f 0400 	mov.w	r4, #0
 800217e:	0194      	lsls	r4, r2, #6
 8002180:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002184:	018b      	lsls	r3, r1, #6
 8002186:	1a5b      	subs	r3, r3, r1
 8002188:	eb64 0402 	sbc.w	r4, r4, r2
 800218c:	f04f 0100 	mov.w	r1, #0
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	00e2      	lsls	r2, r4, #3
 8002196:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800219a:	00d9      	lsls	r1, r3, #3
 800219c:	460b      	mov	r3, r1
 800219e:	4614      	mov	r4, r2
 80021a0:	195b      	adds	r3, r3, r5
 80021a2:	eb44 0406 	adc.w	r4, r4, r6
 80021a6:	f04f 0100 	mov.w	r1, #0
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	0262      	lsls	r2, r4, #9
 80021b0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80021b4:	0259      	lsls	r1, r3, #9
 80021b6:	460b      	mov	r3, r1
 80021b8:	4614      	mov	r4, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	4621      	mov	r1, r4
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f04f 0400 	mov.w	r4, #0
 80021c4:	461a      	mov	r2, r3
 80021c6:	4623      	mov	r3, r4
 80021c8:	f7fd fffe 	bl	80001c8 <__aeabi_uldivmod>
 80021cc:	4603      	mov	r3, r0
 80021ce:	460c      	mov	r4, r1
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	e049      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d4:	4b2f      	ldr	r3, [pc, #188]	; (8002294 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	099b      	lsrs	r3, r3, #6
 80021da:	f04f 0400 	mov.w	r4, #0
 80021de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	ea03 0501 	and.w	r5, r3, r1
 80021ea:	ea04 0602 	and.w	r6, r4, r2
 80021ee:	4629      	mov	r1, r5
 80021f0:	4632      	mov	r2, r6
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	f04f 0400 	mov.w	r4, #0
 80021fa:	0154      	lsls	r4, r2, #5
 80021fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002200:	014b      	lsls	r3, r1, #5
 8002202:	4619      	mov	r1, r3
 8002204:	4622      	mov	r2, r4
 8002206:	1b49      	subs	r1, r1, r5
 8002208:	eb62 0206 	sbc.w	r2, r2, r6
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	f04f 0400 	mov.w	r4, #0
 8002214:	0194      	lsls	r4, r2, #6
 8002216:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800221a:	018b      	lsls	r3, r1, #6
 800221c:	1a5b      	subs	r3, r3, r1
 800221e:	eb64 0402 	sbc.w	r4, r4, r2
 8002222:	f04f 0100 	mov.w	r1, #0
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	00e2      	lsls	r2, r4, #3
 800222c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002230:	00d9      	lsls	r1, r3, #3
 8002232:	460b      	mov	r3, r1
 8002234:	4614      	mov	r4, r2
 8002236:	195b      	adds	r3, r3, r5
 8002238:	eb44 0406 	adc.w	r4, r4, r6
 800223c:	f04f 0100 	mov.w	r1, #0
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	02a2      	lsls	r2, r4, #10
 8002246:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800224a:	0299      	lsls	r1, r3, #10
 800224c:	460b      	mov	r3, r1
 800224e:	4614      	mov	r4, r2
 8002250:	4618      	mov	r0, r3
 8002252:	4621      	mov	r1, r4
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f04f 0400 	mov.w	r4, #0
 800225a:	461a      	mov	r2, r3
 800225c:	4623      	mov	r3, r4
 800225e:	f7fd ffb3 	bl	80001c8 <__aeabi_uldivmod>
 8002262:	4603      	mov	r3, r0
 8002264:	460c      	mov	r4, r1
 8002266:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	0c1b      	lsrs	r3, r3, #16
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	3301      	adds	r3, #1
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	60bb      	str	r3, [r7, #8]
      break;
 8002282:	e002      	b.n	800228a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002286:	60bb      	str	r3, [r7, #8]
      break;
 8002288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800228a:	68bb      	ldr	r3, [r7, #8]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002294:	40023800 	.word	0x40023800
 8002298:	00f42400 	.word	0x00f42400
 800229c:	007a1200 	.word	0x007a1200

080022a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e01d      	b.n	80022ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fb7e 	bl	80009c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3304      	adds	r3, #4
 80022dc:	4619      	mov	r1, r3
 80022de:	4610      	mov	r0, r2
 80022e0:	f000 fa14 	bl	800270c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0201 	orr.w	r2, r2, #1
 800230c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b06      	cmp	r3, #6
 800231e:	d007      	beq.n	8002330 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b02      	cmp	r3, #2
 8002352:	d122      	bne.n	800239a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d11b      	bne.n	800239a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f06f 0202 	mvn.w	r2, #2
 800236a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f9a5 	bl	80026d0 <HAL_TIM_IC_CaptureCallback>
 8002386:	e005      	b.n	8002394 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f997 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f9a8 	bl	80026e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d122      	bne.n	80023ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d11b      	bne.n	80023ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f06f 0204 	mvn.w	r2, #4
 80023be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f97b 	bl	80026d0 <HAL_TIM_IC_CaptureCallback>
 80023da:	e005      	b.n	80023e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f96d 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f97e 	bl	80026e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d122      	bne.n	8002442 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b08      	cmp	r3, #8
 8002408:	d11b      	bne.n	8002442 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f06f 0208 	mvn.w	r2, #8
 8002412:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2204      	movs	r2, #4
 8002418:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f951 	bl	80026d0 <HAL_TIM_IC_CaptureCallback>
 800242e:	e005      	b.n	800243c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f943 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f954 	bl	80026e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b10      	cmp	r3, #16
 800244e:	d122      	bne.n	8002496 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b10      	cmp	r3, #16
 800245c:	d11b      	bne.n	8002496 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f06f 0210 	mvn.w	r2, #16
 8002466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2208      	movs	r2, #8
 800246c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f927 	bl	80026d0 <HAL_TIM_IC_CaptureCallback>
 8002482:	e005      	b.n	8002490 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f919 	bl	80026bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f92a 	bl	80026e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d10e      	bne.n	80024c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d107      	bne.n	80024c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f06f 0201 	mvn.w	r2, #1
 80024ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7fe fa3b 	bl	8000938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024cc:	2b80      	cmp	r3, #128	; 0x80
 80024ce:	d10e      	bne.n	80024ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024da:	2b80      	cmp	r3, #128	; 0x80
 80024dc:	d107      	bne.n	80024ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 facf 	bl	8002a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f8:	2b40      	cmp	r3, #64	; 0x40
 80024fa:	d10e      	bne.n	800251a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d107      	bne.n	800251a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f8ef 	bl	80026f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b20      	cmp	r3, #32
 8002526:	d10e      	bne.n	8002546 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b20      	cmp	r3, #32
 8002534:	d107      	bne.n	8002546 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f06f 0220 	mvn.w	r2, #32
 800253e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fa99 	bl	8002a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_TIM_ConfigClockSource+0x18>
 8002562:	2302      	movs	r3, #2
 8002564:	e0a6      	b.n	80026b4 <HAL_TIM_ConfigClockSource+0x166>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2202      	movs	r2, #2
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002584:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800258c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b40      	cmp	r3, #64	; 0x40
 800259c:	d067      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x120>
 800259e:	2b40      	cmp	r3, #64	; 0x40
 80025a0:	d80b      	bhi.n	80025ba <HAL_TIM_ConfigClockSource+0x6c>
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d073      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x140>
 80025a6:	2b10      	cmp	r3, #16
 80025a8:	d802      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x62>
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d06f      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80025ae:	e078      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d06c      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x140>
 80025b4:	2b30      	cmp	r3, #48	; 0x30
 80025b6:	d06a      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x140>
      break;
 80025b8:	e073      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025ba:	2b70      	cmp	r3, #112	; 0x70
 80025bc:	d00d      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x8c>
 80025be:	2b70      	cmp	r3, #112	; 0x70
 80025c0:	d804      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x7e>
 80025c2:	2b50      	cmp	r3, #80	; 0x50
 80025c4:	d033      	beq.n	800262e <HAL_TIM_ConfigClockSource+0xe0>
 80025c6:	2b60      	cmp	r3, #96	; 0x60
 80025c8:	d041      	beq.n	800264e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80025ca:	e06a      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80025cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d0:	d066      	beq.n	80026a0 <HAL_TIM_ConfigClockSource+0x152>
 80025d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d6:	d017      	beq.n	8002608 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80025d8:	e063      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6899      	ldr	r1, [r3, #8]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f000 f9a9 	bl	8002940 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	609a      	str	r2, [r3, #8]
      break;
 8002606:	e04c      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6899      	ldr	r1, [r3, #8]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f000 f992 	bl	8002940 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800262a:	609a      	str	r2, [r3, #8]
      break;
 800262c:	e039      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	461a      	mov	r2, r3
 800263c:	f000 f906 	bl	800284c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2150      	movs	r1, #80	; 0x50
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f95f 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 800264c:	e029      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6859      	ldr	r1, [r3, #4]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	461a      	mov	r2, r3
 800265c:	f000 f925 	bl	80028aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2160      	movs	r1, #96	; 0x60
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f94f 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 800266c:	e019      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6859      	ldr	r1, [r3, #4]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	461a      	mov	r2, r3
 800267c:	f000 f8e6 	bl	800284c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2140      	movs	r1, #64	; 0x40
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f93f 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 800268c:	e009      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4619      	mov	r1, r3
 8002698:	4610      	mov	r0, r2
 800269a:	f000 f936 	bl	800290a <TIM_ITRx_SetConfig>
      break;
 800269e:	e000      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80026a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a40      	ldr	r2, [pc, #256]	; (8002820 <TIM_Base_SetConfig+0x114>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d013      	beq.n	800274c <TIM_Base_SetConfig+0x40>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272a:	d00f      	beq.n	800274c <TIM_Base_SetConfig+0x40>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a3d      	ldr	r2, [pc, #244]	; (8002824 <TIM_Base_SetConfig+0x118>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00b      	beq.n	800274c <TIM_Base_SetConfig+0x40>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a3c      	ldr	r2, [pc, #240]	; (8002828 <TIM_Base_SetConfig+0x11c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d007      	beq.n	800274c <TIM_Base_SetConfig+0x40>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a3b      	ldr	r2, [pc, #236]	; (800282c <TIM_Base_SetConfig+0x120>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d003      	beq.n	800274c <TIM_Base_SetConfig+0x40>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a3a      	ldr	r2, [pc, #232]	; (8002830 <TIM_Base_SetConfig+0x124>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d108      	bne.n	800275e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a2f      	ldr	r2, [pc, #188]	; (8002820 <TIM_Base_SetConfig+0x114>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d02b      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276c:	d027      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <TIM_Base_SetConfig+0x118>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d023      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a2b      	ldr	r2, [pc, #172]	; (8002828 <TIM_Base_SetConfig+0x11c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d01f      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a2a      	ldr	r2, [pc, #168]	; (800282c <TIM_Base_SetConfig+0x120>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d01b      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a29      	ldr	r2, [pc, #164]	; (8002830 <TIM_Base_SetConfig+0x124>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d017      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a28      	ldr	r2, [pc, #160]	; (8002834 <TIM_Base_SetConfig+0x128>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a27      	ldr	r2, [pc, #156]	; (8002838 <TIM_Base_SetConfig+0x12c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00f      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a26      	ldr	r2, [pc, #152]	; (800283c <TIM_Base_SetConfig+0x130>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00b      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a25      	ldr	r2, [pc, #148]	; (8002840 <TIM_Base_SetConfig+0x134>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d007      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a24      	ldr	r2, [pc, #144]	; (8002844 <TIM_Base_SetConfig+0x138>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d003      	beq.n	80027be <TIM_Base_SetConfig+0xb2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a23      	ldr	r2, [pc, #140]	; (8002848 <TIM_Base_SetConfig+0x13c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d108      	bne.n	80027d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <TIM_Base_SetConfig+0x114>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d003      	beq.n	8002804 <TIM_Base_SetConfig+0xf8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <TIM_Base_SetConfig+0x124>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d103      	bne.n	800280c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	615a      	str	r2, [r3, #20]
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40010000 	.word	0x40010000
 8002824:	40000400 	.word	0x40000400
 8002828:	40000800 	.word	0x40000800
 800282c:	40000c00 	.word	0x40000c00
 8002830:	40010400 	.word	0x40010400
 8002834:	40014000 	.word	0x40014000
 8002838:	40014400 	.word	0x40014400
 800283c:	40014800 	.word	0x40014800
 8002840:	40001800 	.word	0x40001800
 8002844:	40001c00 	.word	0x40001c00
 8002848:	40002000 	.word	0x40002000

0800284c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f023 0201 	bic.w	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 030a 	bic.w	r3, r3, #10
 8002888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	621a      	str	r2, [r3, #32]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b087      	sub	sp, #28
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	f023 0210 	bic.w	r2, r3, #16
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	031b      	lsls	r3, r3, #12
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	621a      	str	r2, [r3, #32]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800290a:	b480      	push	{r7}
 800290c:	b085      	sub	sp, #20
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	f043 0307 	orr.w	r3, r3, #7
 800292c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	609a      	str	r2, [r3, #8]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800295a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	021a      	lsls	r2, r3, #8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	431a      	orrs	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4313      	orrs	r3, r2
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	609a      	str	r2, [r3, #8]
}
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002994:	2302      	movs	r3, #2
 8002996:	e05a      	b.n	8002a4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a21      	ldr	r2, [pc, #132]	; (8002a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d022      	beq.n	8002a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e4:	d01d      	beq.n	8002a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d018      	beq.n	8002a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1a      	ldr	r2, [pc, #104]	; (8002a68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00e      	beq.n	8002a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d009      	beq.n	8002a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d004      	beq.n	8002a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d10c      	bne.n	8002a3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	40000400 	.word	0x40000400
 8002a64:	40000800 	.word	0x40000800
 8002a68:	40000c00 	.word	0x40000c00
 8002a6c:	40010400 	.word	0x40010400
 8002a70:	40014000 	.word	0x40014000
 8002a74:	40001800 	.word	0x40001800

08002a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <__libc_init_array>:
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	4e0d      	ldr	r6, [pc, #52]	; (8002ad8 <__libc_init_array+0x38>)
 8002aa4:	4c0d      	ldr	r4, [pc, #52]	; (8002adc <__libc_init_array+0x3c>)
 8002aa6:	1ba4      	subs	r4, r4, r6
 8002aa8:	10a4      	asrs	r4, r4, #2
 8002aaa:	2500      	movs	r5, #0
 8002aac:	42a5      	cmp	r5, r4
 8002aae:	d109      	bne.n	8002ac4 <__libc_init_array+0x24>
 8002ab0:	4e0b      	ldr	r6, [pc, #44]	; (8002ae0 <__libc_init_array+0x40>)
 8002ab2:	4c0c      	ldr	r4, [pc, #48]	; (8002ae4 <__libc_init_array+0x44>)
 8002ab4:	f000 f820 	bl	8002af8 <_init>
 8002ab8:	1ba4      	subs	r4, r4, r6
 8002aba:	10a4      	asrs	r4, r4, #2
 8002abc:	2500      	movs	r5, #0
 8002abe:	42a5      	cmp	r5, r4
 8002ac0:	d105      	bne.n	8002ace <__libc_init_array+0x2e>
 8002ac2:	bd70      	pop	{r4, r5, r6, pc}
 8002ac4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ac8:	4798      	blx	r3
 8002aca:	3501      	adds	r5, #1
 8002acc:	e7ee      	b.n	8002aac <__libc_init_array+0xc>
 8002ace:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ad2:	4798      	blx	r3
 8002ad4:	3501      	adds	r5, #1
 8002ad6:	e7f2      	b.n	8002abe <__libc_init_array+0x1e>
 8002ad8:	08002b30 	.word	0x08002b30
 8002adc:	08002b30 	.word	0x08002b30
 8002ae0:	08002b30 	.word	0x08002b30
 8002ae4:	08002b34 	.word	0x08002b34

08002ae8 <memset>:
 8002ae8:	4402      	add	r2, r0
 8002aea:	4603      	mov	r3, r0
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d100      	bne.n	8002af2 <memset+0xa>
 8002af0:	4770      	bx	lr
 8002af2:	f803 1b01 	strb.w	r1, [r3], #1
 8002af6:	e7f9      	b.n	8002aec <memset+0x4>

08002af8 <_init>:
 8002af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afa:	bf00      	nop
 8002afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afe:	bc08      	pop	{r3}
 8002b00:	469e      	mov	lr, r3
 8002b02:	4770      	bx	lr

08002b04 <_fini>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	bf00      	nop
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr
