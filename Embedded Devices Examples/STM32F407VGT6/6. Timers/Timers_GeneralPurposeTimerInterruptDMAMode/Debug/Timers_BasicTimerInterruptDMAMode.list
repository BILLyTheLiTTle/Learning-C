
Timers_BasicTimerInterruptDMAMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002654  08002654  00012654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800266c  0800266c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800266c  0800266c  0001266c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002674  08002674  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002674  08002674  00012674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002678  08002678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800267c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000010  0800268c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  0800268c  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008dcb  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001577  00000000  00000000  00028e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  0002a388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f8  00000000  00000000  0002ad38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fb57  00000000  00000000  0002b630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007086  00000000  00000000  0004b187  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c347d  00000000  00000000  0005220d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011568a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000280c  00000000  00000000  00115708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800263c 	.word	0x0800263c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800263c 	.word	0x0800263c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fb10 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f81e 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8dc 	bl	8000690 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d8:	f000 f8ba 	bl	8000650 <MX_DMA_Init>
  MX_TIM7_Init();
 80004dc:	f000 f882 	bl	80005e4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_Start_IT(&hdma_tim7_up, (uint32_t) on_board_LED_data, (uint32_t) &GPIOD->ODR, 2);
 80004e0:	4907      	ldr	r1, [pc, #28]	; (8000500 <main+0x38>)
 80004e2:	2302      	movs	r3, #2
 80004e4:	4a07      	ldr	r2, [pc, #28]	; (8000504 <main+0x3c>)
 80004e6:	4808      	ldr	r0, [pc, #32]	; (8000508 <main+0x40>)
 80004e8:	f000 fd34 	bl	8000f54 <HAL_DMA_Start_IT>
  __HAL_TIM_ENABLE_DMA(&htim7, TIM_DMA_UPDATE);
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <main+0x44>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	68da      	ldr	r2, [r3, #12]
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <main+0x44>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004fa:	60da      	str	r2, [r3, #12]
  //HAL_TIM_Base_Start_DMA(&htim7, (uint32_t) on_board_LED_data, 2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <main+0x34>
 80004fe:	bf00      	nop
 8000500:	20000000 	.word	0x20000000
 8000504:	40020c14 	.word	0x40020c14
 8000508:	20000030 	.word	0x20000030
 800050c:	20000090 	.word	0x20000090

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	; 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	; 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 f884 	bl	800262c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	4a27      	ldr	r2, [pc, #156]	; (80005dc <SystemClock_Config+0xcc>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	; 0x40
 8000544:	4b25      	ldr	r3, [pc, #148]	; (80005dc <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <SystemClock_Config+0xd0>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056c:	2301      	movs	r3, #1
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000580:	2308      	movs	r3, #8
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000584:	23a8      	movs	r3, #168	; 0xa8
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058c:	2307      	movs	r3, #7
 800058e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0320 	add.w	r3, r7, #32
 8000594:	4618      	mov	r0, r3
 8000596:	f001 f96b 	bl	8001870 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a0:	f000 f998 	bl	80008d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2302      	movs	r3, #2
 80005aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2102      	movs	r1, #2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fbc4 	bl	8001d50 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ce:	f000 f981 	bl	80008d4 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	; 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_TIM7_Init+0x64>)
 80005f4:	4a15      	ldr	r2, [pc, #84]	; (800064c <MX_TIM7_Init+0x68>)
 80005f6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20999;
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_TIM7_Init+0x64>)
 80005fa:	f245 2207 	movw	r2, #20999	; 0x5207
 80005fe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_TIM7_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 499;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_TIM7_Init+0x64>)
 8000608:	f240 12f3 	movw	r2, #499	; 0x1f3
 800060c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_TIM7_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <MX_TIM7_Init+0x64>)
 8000616:	f001 fd59 	bl	80020cc <HAL_TIM_Base_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000620:	f000 f958 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000624:	2320      	movs	r3, #32
 8000626:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_TIM7_Init+0x64>)
 8000632:	f001 ff47 	bl	80024c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800063c:	f000 f94a 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000090 	.word	0x20000090
 800064c:	40001400 	.word	0x40001400

08000650 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_DMA_Init+0x3c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a0b      	ldr	r2, [pc, #44]	; (800068c <MX_DMA_Init+0x3c>)
 8000660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_DMA_Init+0x3c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	200d      	movs	r0, #13
 8000678:	f000 fb87 	bl	8000d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800067c:	200d      	movs	r0, #13
 800067e:	f000 fba0 	bl	8000dc2 <HAL_NVIC_EnableIRQ>

}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b79      	ldr	r3, [pc, #484]	; (8000890 <MX_GPIO_Init+0x200>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a78      	ldr	r2, [pc, #480]	; (8000890 <MX_GPIO_Init+0x200>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b76      	ldr	r3, [pc, #472]	; (8000890 <MX_GPIO_Init+0x200>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b72      	ldr	r3, [pc, #456]	; (8000890 <MX_GPIO_Init+0x200>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a71      	ldr	r2, [pc, #452]	; (8000890 <MX_GPIO_Init+0x200>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b6f      	ldr	r3, [pc, #444]	; (8000890 <MX_GPIO_Init+0x200>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b6b      	ldr	r3, [pc, #428]	; (8000890 <MX_GPIO_Init+0x200>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a6a      	ldr	r2, [pc, #424]	; (8000890 <MX_GPIO_Init+0x200>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b68      	ldr	r3, [pc, #416]	; (8000890 <MX_GPIO_Init+0x200>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b64      	ldr	r3, [pc, #400]	; (8000890 <MX_GPIO_Init+0x200>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a63      	ldr	r2, [pc, #396]	; (8000890 <MX_GPIO_Init+0x200>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b61      	ldr	r3, [pc, #388]	; (8000890 <MX_GPIO_Init+0x200>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b5d      	ldr	r3, [pc, #372]	; (8000890 <MX_GPIO_Init+0x200>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a5c      	ldr	r2, [pc, #368]	; (8000890 <MX_GPIO_Init+0x200>)
 8000720:	f043 0308 	orr.w	r3, r3, #8
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b5a      	ldr	r3, [pc, #360]	; (8000890 <MX_GPIO_Init+0x200>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OnBoardGreenLED_Pin|OnBoardOrangeLED_Pin|OnBoardRedLED_Pin|OnBoardBlueLED_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000738:	4856      	ldr	r0, [pc, #344]	; (8000894 <MX_GPIO_Init+0x204>)
 800073a:	f001 f865 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TimerOutputUEV_GPIO_Port, TimerOutputUEV_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000744:	4854      	ldr	r0, [pc, #336]	; (8000898 <MX_GPIO_Init+0x208>)
 8000746:	f001 f85f 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800074a:	2308      	movs	r3, #8
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	2302      	movs	r3, #2
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800075a:	2305      	movs	r3, #5
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	484d      	ldr	r0, [pc, #308]	; (800089c <MX_GPIO_Init+0x20c>)
 8000766:	f000 feb5 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800076a:	2310      	movs	r3, #16
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800077a:	2306      	movs	r3, #6
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	4844      	ldr	r0, [pc, #272]	; (8000898 <MX_GPIO_Init+0x208>)
 8000786:	f000 fea5 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800078a:	23e0      	movs	r3, #224	; 0xe0
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800079a:	2305      	movs	r3, #5
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	483c      	ldr	r0, [pc, #240]	; (8000898 <MX_GPIO_Init+0x208>)
 80007a6:	f000 fe95 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007bc:	2305      	movs	r3, #5
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	4836      	ldr	r0, [pc, #216]	; (80008a0 <MX_GPIO_Init+0x210>)
 80007c8:	f000 fe84 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OnBoardGreenLED_Pin OnBoardOrangeLED_Pin OnBoardRedLED_Pin OnBoardBlueLED_Pin */
  GPIO_InitStruct.Pin = OnBoardGreenLED_Pin|OnBoardOrangeLED_Pin|OnBoardRedLED_Pin|OnBoardBlueLED_Pin;
 80007cc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	482b      	ldr	r0, [pc, #172]	; (8000894 <MX_GPIO_Init+0x204>)
 80007e6:	f000 fe75 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80007ea:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007fc:	2306      	movs	r3, #6
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4825      	ldr	r0, [pc, #148]	; (800089c <MX_GPIO_Init+0x20c>)
 8000808:	f000 fe64 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TimerOutputUEV_Pin */
  GPIO_InitStruct.Pin = TimerOutputUEV_Pin;
 800080c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TimerOutputUEV_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	481c      	ldr	r0, [pc, #112]	; (8000898 <MX_GPIO_Init+0x208>)
 8000826:	f000 fe55 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800082a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4816      	ldr	r0, [pc, #88]	; (8000898 <MX_GPIO_Init+0x208>)
 8000840:	f000 fe48 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000844:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000856:	230a      	movs	r3, #10
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_GPIO_Init+0x208>)
 8000862:	f000 fe37 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000866:	f44f 7310 	mov.w	r3, #576	; 0x240
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800086c:	2312      	movs	r3, #18
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000870:	2301      	movs	r3, #1
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000878:	2304      	movs	r3, #4
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4807      	ldr	r0, [pc, #28]	; (80008a0 <MX_GPIO_Init+0x210>)
 8000884:	f000 fe26 	bl	80014d4 <HAL_GPIO_Init>

}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	; 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40020c00 	.word	0x40020c00
 8000898:	40020000 	.word	0x40020000
 800089c:	40020800 	.word	0x40020800
 80008a0:	40020400 	.word	0x40020400

080008a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	counter++;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008b6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(TimerOutputUEV_GPIO_Port, TimerOutputUEV_Pin);
 80008b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008be:	f000 ffbc 	bl	800183a <HAL_GPIO_TogglePin>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000002c 	.word	0x2000002c
 80008d0:	40020000 	.word	0x40020000

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000922:	2007      	movs	r0, #7
 8000924:	f000 fa26 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a26      	ldr	r2, [pc, #152]	; (80009dc <HAL_TIM_Base_MspInit+0xa8>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d146      	bne.n	80009d4 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <HAL_TIM_Base_MspInit+0xac>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a24      	ldr	r2, [pc, #144]	; (80009e0 <HAL_TIM_Base_MspInit+0xac>)
 8000950:	f043 0320 	orr.w	r3, r3, #32
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <HAL_TIM_Base_MspInit+0xac>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 0320 	and.w	r3, r3, #32
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM7 DMA Init */
    /* TIM7_UP Init */
    hdma_tim7_up.Instance = DMA1_Stream2;
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 8000964:	4a20      	ldr	r2, [pc, #128]	; (80009e8 <HAL_TIM_Base_MspInit+0xb4>)
 8000966:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 800096a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800096e:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 800097e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000982:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 8000986:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800098a:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 800098e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000992:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_CIRCULAR;
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 8000996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800099a:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_LOW;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
    hdma_tim7_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 80009a8:	480e      	ldr	r0, [pc, #56]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 80009aa:	f000 fa25 	bl	8000df8 <HAL_DMA_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80009b4:	f7ff ff8e 	bl	80008d4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 80009bc:	621a      	str	r2, [r3, #32]
 80009be:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2037      	movs	r0, #55	; 0x37
 80009ca:	f000 f9de 	bl	8000d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80009ce:	2037      	movs	r0, #55	; 0x37
 80009d0:	f000 f9f7 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40001400 	.word	0x40001400
 80009e0:	40023800 	.word	0x40023800
 80009e4:	20000030 	.word	0x20000030
 80009e8:	40026040 	.word	0x40026040

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 f8a8 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <DMA1_Stream2_IRQHandler+0x10>)
 8000a4e:	f000 fad9 	bl	8001004 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000030 	.word	0x20000030

08000a5c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <TIM7_IRQHandler+0x10>)
 8000a62:	f001 fb5e 	bl	8002122 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000090 	.word	0x20000090

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <SystemInit+0x28>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <SystemInit+0x28>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <SystemInit+0x28>)
 8000a86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000aa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aa2:	e003      	b.n	8000aac <LoopCopyDataInit>

08000aa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000aa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aaa:	3104      	adds	r1, #4

08000aac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ab0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ab2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ab4:	d3f6      	bcc.n	8000aa4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ab8:	e002      	b.n	8000ac0 <LoopFillZerobss>

08000aba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000abc:	f842 3b04 	str.w	r3, [r2], #4

08000ac0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ac4:	d3f9      	bcc.n	8000aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ac6:	f7ff ffd3 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aca:	f001 fd8b 	bl	80025e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ace:	f7ff fcfb 	bl	80004c8 <main>
  bx  lr    
 8000ad2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ad4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ad8:	0800267c 	.word	0x0800267c
  ldr  r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ae0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000ae4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000ae8:	200000d4 	.word	0x200000d4

08000aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <HAL_Init+0x40>)
 8000afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_Init+0x40>)
 8000b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_Init+0x40>)
 8000b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f92b 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f808 	bl	8000b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b24:	f7ff fede 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023c00 	.word	0x40023c00

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x54>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x58>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f943 	bl	8000dde <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00e      	b.n	8000b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d80a      	bhi.n	8000b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f000 f90b 	bl	8000d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_InitTick+0x5c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000004 	.word	0x20000004
 8000b8c:	2000000c 	.word	0x2000000c
 8000b90:	20000008 	.word	0x20000008

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	2000000c 	.word	0x2000000c
 8000bb8:	200000d0 	.word	0x200000d0

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200000d0 	.word	0x200000d0

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	; (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f7ff ff8e 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff29 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff3e 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff8e 	bl	8000cc8 <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5d 	bl	8000c74 <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff31 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffa2 	bl	8000d30 <SysTick_Config>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff feda 	bl	8000bbc <HAL_GetTick>
 8000e08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e099      	b.n	8000f48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2202      	movs	r2, #2
 8000e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 0201 	bic.w	r2, r2, #1
 8000e32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e34:	e00f      	b.n	8000e56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e36:	f7ff fec1 	bl	8000bbc <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	2b05      	cmp	r3, #5
 8000e42:	d908      	bls.n	8000e56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2220      	movs	r2, #32
 8000e48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e078      	b.n	8000f48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1e8      	bne.n	8000e36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	4b38      	ldr	r3, [pc, #224]	; (8000f50 <HAL_DMA_Init+0x158>)
 8000e70:	4013      	ands	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a1b      	ldr	r3, [r3, #32]
 8000ea0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d107      	bne.n	8000ec0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f023 0307 	bic.w	r3, r3, #7
 8000ed6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	d117      	bne.n	8000f1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00e      	beq.n	8000f1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 fa6f 	bl	80013e0 <DMA_CheckFifoParam>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d008      	beq.n	8000f1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2240      	movs	r2, #64	; 0x40
 8000f0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f16:	2301      	movs	r3, #1
 8000f18:	e016      	b.n	8000f48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 fa26 	bl	8001374 <DMA_CalcBaseAndBitshift>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f30:	223f      	movs	r2, #63	; 0x3f
 8000f32:	409a      	lsls	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2201      	movs	r2, #1
 8000f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	f010803f 	.word	0xf010803f

08000f54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d101      	bne.n	8000f7a <HAL_DMA_Start_IT+0x26>
 8000f76:	2302      	movs	r3, #2
 8000f78:	e040      	b.n	8000ffc <HAL_DMA_Start_IT+0xa8>
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d12f      	bne.n	8000fee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2202      	movs	r2, #2
 8000f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f000 f9b8 	bl	8001318 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fac:	223f      	movs	r2, #63	; 0x3f
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0216 	orr.w	r2, r2, #22
 8000fc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d007      	beq.n	8000fdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0208 	orr.w	r2, r2, #8
 8000fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0201 	orr.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	e005      	b.n	8000ffa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001010:	4b92      	ldr	r3, [pc, #584]	; (800125c <HAL_DMA_IRQHandler+0x258>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a92      	ldr	r2, [pc, #584]	; (8001260 <HAL_DMA_IRQHandler+0x25c>)
 8001016:	fba2 2303 	umull	r2, r3, r2, r3
 800101a:	0a9b      	lsrs	r3, r3, #10
 800101c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800102e:	2208      	movs	r2, #8
 8001030:	409a      	lsls	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4013      	ands	r3, r2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d01a      	beq.n	8001070 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d013      	beq.n	8001070 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0204 	bic.w	r2, r2, #4
 8001056:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800105c:	2208      	movs	r2, #8
 800105e:	409a      	lsls	r2, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001068:	f043 0201 	orr.w	r2, r3, #1
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001074:	2201      	movs	r2, #1
 8001076:	409a      	lsls	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4013      	ands	r3, r2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d012      	beq.n	80010a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00b      	beq.n	80010a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001092:	2201      	movs	r2, #1
 8001094:	409a      	lsls	r2, r3
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800109e:	f043 0202 	orr.w	r2, r3, #2
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010aa:	2204      	movs	r2, #4
 80010ac:	409a      	lsls	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4013      	ands	r3, r2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d012      	beq.n	80010dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00b      	beq.n	80010dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c8:	2204      	movs	r2, #4
 80010ca:	409a      	lsls	r2, r3
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d4:	f043 0204 	orr.w	r2, r3, #4
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e0:	2210      	movs	r2, #16
 80010e2:	409a      	lsls	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d043      	beq.n	8001174 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d03c      	beq.n	8001174 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fe:	2210      	movs	r2, #16
 8001100:	409a      	lsls	r2, r3
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d018      	beq.n	8001146 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d108      	bne.n	8001134 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	2b00      	cmp	r3, #0
 8001128:	d024      	beq.n	8001174 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	4798      	blx	r3
 8001132:	e01f      	b.n	8001174 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001138:	2b00      	cmp	r3, #0
 800113a:	d01b      	beq.n	8001174 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	4798      	blx	r3
 8001144:	e016      	b.n	8001174 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001150:	2b00      	cmp	r3, #0
 8001152:	d107      	bne.n	8001164 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0208 	bic.w	r2, r2, #8
 8001162:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001178:	2220      	movs	r2, #32
 800117a:	409a      	lsls	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4013      	ands	r3, r2
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 808e 	beq.w	80012a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 8086 	beq.w	80012a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119a:	2220      	movs	r2, #32
 800119c:	409a      	lsls	r2, r3
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	d136      	bne.n	800121c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0216 	bic.w	r2, r2, #22
 80011bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	695a      	ldr	r2, [r3, #20]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <HAL_DMA_IRQHandler+0x1da>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0208 	bic.w	r2, r2, #8
 80011ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f2:	223f      	movs	r2, #63	; 0x3f
 80011f4:	409a      	lsls	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800120e:	2b00      	cmp	r3, #0
 8001210:	d07d      	beq.n	800130e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	4798      	blx	r3
        }
        return;
 800121a:	e078      	b.n	800130e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d01c      	beq.n	8001264 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d108      	bne.n	800124a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123c:	2b00      	cmp	r3, #0
 800123e:	d030      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	4798      	blx	r3
 8001248:	e02b      	b.n	80012a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800124e:	2b00      	cmp	r3, #0
 8001250:	d027      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	4798      	blx	r3
 800125a:	e022      	b.n	80012a2 <HAL_DMA_IRQHandler+0x29e>
 800125c:	20000004 	.word	0x20000004
 8001260:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10f      	bne.n	8001292 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0210 	bic.w	r2, r2, #16
 8001280:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d032      	beq.n	8001310 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d022      	beq.n	80012fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2205      	movs	r2, #5
 80012ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0201 	bic.w	r2, r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	3301      	adds	r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d307      	bcc.n	80012ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f2      	bne.n	80012ce <HAL_DMA_IRQHandler+0x2ca>
 80012e8:	e000      	b.n	80012ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80012ea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	4798      	blx	r3
 800130c:	e000      	b.n	8001310 <HAL_DMA_IRQHandler+0x30c>
        return;
 800130e:	bf00      	nop
    }
  }
}
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop

08001318 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001334:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b40      	cmp	r3, #64	; 0x40
 8001344:	d108      	bne.n	8001358 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001356:	e007      	b.n	8001368 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	60da      	str	r2, [r3, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	3b10      	subs	r3, #16
 8001384:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <DMA_CalcBaseAndBitshift+0x64>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800138e:	4a13      	ldr	r2, [pc, #76]	; (80013dc <DMA_CalcBaseAndBitshift+0x68>)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d909      	bls.n	80013b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013aa:	f023 0303 	bic.w	r3, r3, #3
 80013ae:	1d1a      	adds	r2, r3, #4
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	659a      	str	r2, [r3, #88]	; 0x58
 80013b4:	e007      	b.n	80013c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013be:	f023 0303 	bic.w	r3, r3, #3
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	aaaaaaab 	.word	0xaaaaaaab
 80013dc:	08002664 	.word	0x08002664

080013e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d11f      	bne.n	800143a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d855      	bhi.n	80014ac <DMA_CheckFifoParam+0xcc>
 8001400:	a201      	add	r2, pc, #4	; (adr r2, 8001408 <DMA_CheckFifoParam+0x28>)
 8001402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001406:	bf00      	nop
 8001408:	08001419 	.word	0x08001419
 800140c:	0800142b 	.word	0x0800142b
 8001410:	08001419 	.word	0x08001419
 8001414:	080014ad 	.word	0x080014ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d045      	beq.n	80014b0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001428:	e042      	b.n	80014b0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001432:	d13f      	bne.n	80014b4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001438:	e03c      	b.n	80014b4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001442:	d121      	bne.n	8001488 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d836      	bhi.n	80014b8 <DMA_CheckFifoParam+0xd8>
 800144a:	a201      	add	r2, pc, #4	; (adr r2, 8001450 <DMA_CheckFifoParam+0x70>)
 800144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001450:	08001461 	.word	0x08001461
 8001454:	08001467 	.word	0x08001467
 8001458:	08001461 	.word	0x08001461
 800145c:	08001479 	.word	0x08001479
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
      break;
 8001464:	e02f      	b.n	80014c6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d024      	beq.n	80014bc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001476:	e021      	b.n	80014bc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001480:	d11e      	bne.n	80014c0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001486:	e01b      	b.n	80014c0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d902      	bls.n	8001494 <DMA_CheckFifoParam+0xb4>
 800148e:	2b03      	cmp	r3, #3
 8001490:	d003      	beq.n	800149a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001492:	e018      	b.n	80014c6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
      break;
 8001498:	e015      	b.n	80014c6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00e      	beq.n	80014c4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]
      break;
 80014aa:	e00b      	b.n	80014c4 <DMA_CheckFifoParam+0xe4>
      break;
 80014ac:	bf00      	nop
 80014ae:	e00a      	b.n	80014c6 <DMA_CheckFifoParam+0xe6>
      break;
 80014b0:	bf00      	nop
 80014b2:	e008      	b.n	80014c6 <DMA_CheckFifoParam+0xe6>
      break;
 80014b4:	bf00      	nop
 80014b6:	e006      	b.n	80014c6 <DMA_CheckFifoParam+0xe6>
      break;
 80014b8:	bf00      	nop
 80014ba:	e004      	b.n	80014c6 <DMA_CheckFifoParam+0xe6>
      break;
 80014bc:	bf00      	nop
 80014be:	e002      	b.n	80014c6 <DMA_CheckFifoParam+0xe6>
      break;   
 80014c0:	bf00      	nop
 80014c2:	e000      	b.n	80014c6 <DMA_CheckFifoParam+0xe6>
      break;
 80014c4:	bf00      	nop
    }
  } 
  
  return status; 
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	e16b      	b.n	80017c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f0:	2201      	movs	r2, #1
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	429a      	cmp	r2, r3
 800150a:	f040 815a 	bne.w	80017c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d00b      	beq.n	800152e <HAL_GPIO_Init+0x5a>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d007      	beq.n	800152e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001522:	2b11      	cmp	r3, #17
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b12      	cmp	r3, #18
 800152c:	d130      	bne.n	8001590 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	2203      	movs	r2, #3
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001564:	2201      	movs	r2, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f003 0201 	and.w	r2, r3, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0xfc>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b12      	cmp	r3, #18
 80015ce:	d123      	bne.n	8001618 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	08da      	lsrs	r2, r3, #3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3208      	adds	r2, #8
 80015d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	08da      	lsrs	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3208      	adds	r2, #8
 8001612:	69b9      	ldr	r1, [r7, #24]
 8001614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0203 	and.w	r2, r3, #3
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80b4 	beq.w	80017c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b5f      	ldr	r3, [pc, #380]	; (80017dc <HAL_GPIO_Init+0x308>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a5e      	ldr	r2, [pc, #376]	; (80017dc <HAL_GPIO_Init+0x308>)
 8001664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b5c      	ldr	r3, [pc, #368]	; (80017dc <HAL_GPIO_Init+0x308>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001676:	4a5a      	ldr	r2, [pc, #360]	; (80017e0 <HAL_GPIO_Init+0x30c>)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3302      	adds	r3, #2
 800167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a51      	ldr	r2, [pc, #324]	; (80017e4 <HAL_GPIO_Init+0x310>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d02b      	beq.n	80016fa <HAL_GPIO_Init+0x226>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a50      	ldr	r2, [pc, #320]	; (80017e8 <HAL_GPIO_Init+0x314>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d025      	beq.n	80016f6 <HAL_GPIO_Init+0x222>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4f      	ldr	r2, [pc, #316]	; (80017ec <HAL_GPIO_Init+0x318>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d01f      	beq.n	80016f2 <HAL_GPIO_Init+0x21e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4e      	ldr	r2, [pc, #312]	; (80017f0 <HAL_GPIO_Init+0x31c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d019      	beq.n	80016ee <HAL_GPIO_Init+0x21a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4d      	ldr	r2, [pc, #308]	; (80017f4 <HAL_GPIO_Init+0x320>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_GPIO_Init+0x216>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4c      	ldr	r2, [pc, #304]	; (80017f8 <HAL_GPIO_Init+0x324>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00d      	beq.n	80016e6 <HAL_GPIO_Init+0x212>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4b      	ldr	r2, [pc, #300]	; (80017fc <HAL_GPIO_Init+0x328>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d007      	beq.n	80016e2 <HAL_GPIO_Init+0x20e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4a      	ldr	r2, [pc, #296]	; (8001800 <HAL_GPIO_Init+0x32c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d101      	bne.n	80016de <HAL_GPIO_Init+0x20a>
 80016da:	2307      	movs	r3, #7
 80016dc:	e00e      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016de:	2308      	movs	r3, #8
 80016e0:	e00c      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016e2:	2306      	movs	r3, #6
 80016e4:	e00a      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016e6:	2305      	movs	r3, #5
 80016e8:	e008      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e004      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e002      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016fa:	2300      	movs	r3, #0
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	f002 0203 	and.w	r2, r2, #3
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	4093      	lsls	r3, r2
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800170c:	4934      	ldr	r1, [pc, #208]	; (80017e0 <HAL_GPIO_Init+0x30c>)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800171a:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <HAL_GPIO_Init+0x330>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800173e:	4a31      	ldr	r2, [pc, #196]	; (8001804 <HAL_GPIO_Init+0x330>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001744:	4b2f      	ldr	r3, [pc, #188]	; (8001804 <HAL_GPIO_Init+0x330>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001768:	4a26      	ldr	r2, [pc, #152]	; (8001804 <HAL_GPIO_Init+0x330>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <HAL_GPIO_Init+0x330>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001792:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <HAL_GPIO_Init+0x330>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_GPIO_Init+0x330>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017bc:	4a11      	ldr	r2, [pc, #68]	; (8001804 <HAL_GPIO_Init+0x330>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3301      	adds	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	f67f ae90 	bls.w	80014f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d0:	bf00      	nop
 80017d2:	3724      	adds	r7, #36	; 0x24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40013800 	.word	0x40013800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40020800 	.word	0x40020800
 80017f0:	40020c00 	.word	0x40020c00
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40021400 	.word	0x40021400
 80017fc:	40021800 	.word	0x40021800
 8001800:	40021c00 	.word	0x40021c00
 8001804:	40013c00 	.word	0x40013c00

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001818:	787b      	ldrb	r3, [r7, #1]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001824:	e003      	b.n	800182e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001826:	887b      	ldrh	r3, [r7, #2]
 8001828:	041a      	lsls	r2, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	619a      	str	r2, [r3, #24]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	460b      	mov	r3, r1
 8001844:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	401a      	ands	r2, r3
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	429a      	cmp	r2, r3
 8001852:	d104      	bne.n	800185e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	041a      	lsls	r2, r3, #16
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800185c:	e002      	b.n	8001864 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	619a      	str	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e25b      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d075      	beq.n	800197a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800188e:	4ba3      	ldr	r3, [pc, #652]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b04      	cmp	r3, #4
 8001898:	d00c      	beq.n	80018b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800189a:	4ba0      	ldr	r3, [pc, #640]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d112      	bne.n	80018cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018a6:	4b9d      	ldr	r3, [pc, #628]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018b2:	d10b      	bne.n	80018cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	4b99      	ldr	r3, [pc, #612]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d05b      	beq.n	8001978 <HAL_RCC_OscConfig+0x108>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d157      	bne.n	8001978 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e236      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d4:	d106      	bne.n	80018e4 <HAL_RCC_OscConfig+0x74>
 80018d6:	4b91      	ldr	r3, [pc, #580]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a90      	ldr	r2, [pc, #576]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e01d      	b.n	8001920 <HAL_RCC_OscConfig+0xb0>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ec:	d10c      	bne.n	8001908 <HAL_RCC_OscConfig+0x98>
 80018ee:	4b8b      	ldr	r3, [pc, #556]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a8a      	ldr	r2, [pc, #552]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	4b88      	ldr	r3, [pc, #544]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a87      	ldr	r2, [pc, #540]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e00b      	b.n	8001920 <HAL_RCC_OscConfig+0xb0>
 8001908:	4b84      	ldr	r3, [pc, #528]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a83      	ldr	r2, [pc, #524]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 800190e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b81      	ldr	r3, [pc, #516]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a80      	ldr	r2, [pc, #512]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 800191a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d013      	beq.n	8001950 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff f948 	bl	8000bbc <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff f944 	bl	8000bbc <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e1fb      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0xc0>
 800194e:	e014      	b.n	800197a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff f934 	bl	8000bbc <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff f930 	bl	8000bbc <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e1e7      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196a:	4b6c      	ldr	r3, [pc, #432]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0xe8>
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d063      	beq.n	8001a4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001986:	4b65      	ldr	r3, [pc, #404]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00b      	beq.n	80019aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001992:	4b62      	ldr	r3, [pc, #392]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800199a:	2b08      	cmp	r3, #8
 800199c:	d11c      	bne.n	80019d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199e:	4b5f      	ldr	r3, [pc, #380]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d116      	bne.n	80019d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	4b5c      	ldr	r3, [pc, #368]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <HAL_RCC_OscConfig+0x152>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d001      	beq.n	80019c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e1bb      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c2:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4952      	ldr	r1, [pc, #328]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d6:	e03a      	b.n	8001a4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d020      	beq.n	8001a22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e0:	4b4f      	ldr	r3, [pc, #316]	; (8001b20 <HAL_RCC_OscConfig+0x2b0>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff f8e9 	bl	8000bbc <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ee:	f7ff f8e5 	bl	8000bbc <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e19c      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a00:	4b46      	ldr	r3, [pc, #280]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4940      	ldr	r1, [pc, #256]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]
 8001a20:	e015      	b.n	8001a4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a22:	4b3f      	ldr	r3, [pc, #252]	; (8001b20 <HAL_RCC_OscConfig+0x2b0>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f8c8 	bl	8000bbc <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a30:	f7ff f8c4 	bl	8000bbc <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e17b      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a42:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d030      	beq.n	8001abc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d016      	beq.n	8001a90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a62:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <HAL_RCC_OscConfig+0x2b4>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a68:	f7ff f8a8 	bl	8000bbc <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a70:	f7ff f8a4 	bl	8000bbc <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e15b      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x200>
 8001a8e:	e015      	b.n	8001abc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a90:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <HAL_RCC_OscConfig+0x2b4>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a96:	f7ff f891 	bl	8000bbc <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a9e:	f7ff f88d 	bl	8000bbc <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e144      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80a0 	beq.w	8001c0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10f      	bne.n	8001afa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af6:	2301      	movs	r3, #1
 8001af8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_OscConfig+0x2b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d121      	bne.n	8001b4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <HAL_RCC_OscConfig+0x2b8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <HAL_RCC_OscConfig+0x2b8>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b12:	f7ff f853 	bl	8000bbc <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	e011      	b.n	8001b3e <HAL_RCC_OscConfig+0x2ce>
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	42470000 	.word	0x42470000
 8001b24:	42470e80 	.word	0x42470e80
 8001b28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2c:	f7ff f846 	bl	8000bbc <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e0fd      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3e:	4b81      	ldr	r3, [pc, #516]	; (8001d44 <HAL_RCC_OscConfig+0x4d4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d106      	bne.n	8001b60 <HAL_RCC_OscConfig+0x2f0>
 8001b52:	4b7d      	ldr	r3, [pc, #500]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	4a7c      	ldr	r2, [pc, #496]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5e:	e01c      	b.n	8001b9a <HAL_RCC_OscConfig+0x32a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d10c      	bne.n	8001b82 <HAL_RCC_OscConfig+0x312>
 8001b68:	4b77      	ldr	r3, [pc, #476]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	4a76      	ldr	r2, [pc, #472]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6713      	str	r3, [r2, #112]	; 0x70
 8001b74:	4b74      	ldr	r3, [pc, #464]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a73      	ldr	r2, [pc, #460]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b80:	e00b      	b.n	8001b9a <HAL_RCC_OscConfig+0x32a>
 8001b82:	4b71      	ldr	r3, [pc, #452]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b86:	4a70      	ldr	r2, [pc, #448]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8e:	4b6e      	ldr	r3, [pc, #440]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b92:	4a6d      	ldr	r2, [pc, #436]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d015      	beq.n	8001bce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba2:	f7ff f80b 	bl	8000bbc <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff f807 	bl	8000bbc <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e0bc      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc0:	4b61      	ldr	r3, [pc, #388]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0ee      	beq.n	8001baa <HAL_RCC_OscConfig+0x33a>
 8001bcc:	e014      	b.n	8001bf8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7fe fff5 	bl	8000bbc <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7fe fff1 	bl	8000bbc <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e0a6      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bec:	4b56      	ldr	r3, [pc, #344]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ee      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bf8:	7dfb      	ldrb	r3, [r7, #23]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d105      	bne.n	8001c0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfe:	4b52      	ldr	r3, [pc, #328]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4a51      	ldr	r2, [pc, #324]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8092 	beq.w	8001d38 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c14:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d05c      	beq.n	8001cda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d141      	bne.n	8001cac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c28:	4b48      	ldr	r3, [pc, #288]	; (8001d4c <HAL_RCC_OscConfig+0x4dc>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7fe ffc5 	bl	8000bbc <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c36:	f7fe ffc1 	bl	8000bbc <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e078      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c48:	4b3f      	ldr	r3, [pc, #252]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f0      	bne.n	8001c36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69da      	ldr	r2, [r3, #28]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	019b      	lsls	r3, r3, #6
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	085b      	lsrs	r3, r3, #1
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	041b      	lsls	r3, r3, #16
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c76:	061b      	lsls	r3, r3, #24
 8001c78:	4933      	ldr	r1, [pc, #204]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c7e:	4b33      	ldr	r3, [pc, #204]	; (8001d4c <HAL_RCC_OscConfig+0x4dc>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7fe ff9a 	bl	8000bbc <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7fe ff96 	bl	8000bbc <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e04d      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x41c>
 8001caa:	e045      	b.n	8001d38 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x4dc>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7fe ff83 	bl	8000bbc <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cba:	f7fe ff7f 	bl	8000bbc <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e036      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f0      	bne.n	8001cba <HAL_RCC_OscConfig+0x44a>
 8001cd8:	e02e      	b.n	8001d38 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e029      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_RCC_OscConfig+0x4d8>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d11c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d115      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d0e:	4013      	ands	r3, r2
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d10d      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d106      	bne.n	8001d34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40007000 	.word	0x40007000
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	42470060 	.word	0x42470060

08001d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0cc      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b68      	ldr	r3, [pc, #416]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d90c      	bls.n	8001d8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b65      	ldr	r3, [pc, #404]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b63      	ldr	r3, [pc, #396]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0b8      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d020      	beq.n	8001dda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001da4:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4a58      	ldr	r2, [pc, #352]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dbc:	4b53      	ldr	r3, [pc, #332]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4a52      	ldr	r2, [pc, #328]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc8:	4b50      	ldr	r3, [pc, #320]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	494d      	ldr	r1, [pc, #308]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d044      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	4b47      	ldr	r3, [pc, #284]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d119      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e07f      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d003      	beq.n	8001e0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	4b3f      	ldr	r3, [pc, #252]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e06f      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e067      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4934      	ldr	r1, [pc, #208]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e40:	f7fe febc 	bl	8000bbc <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7fe feb8 	bl	8000bbc <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e04f      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e70:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d20c      	bcs.n	8001e98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <HAL_RCC_ClockConfig+0x1b8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e032      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea4:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4916      	ldr	r1, [pc, #88]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d009      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	490e      	ldr	r1, [pc, #56]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ed6:	f000 f821 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 8001eda:	4601      	mov	r1, r0
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	5cd3      	ldrb	r3, [r2, r3]
 8001eea:	fa21 f303 	lsr.w	r3, r1, r3
 8001eee:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fe1c 	bl	8000b34 <HAL_InitTick>

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023c00 	.word	0x40023c00
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	08002654 	.word	0x08002654
 8001f14:	20000004 	.word	0x20000004
 8001f18:	20000008 	.word	0x20000008

08001f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f32:	4b63      	ldr	r3, [pc, #396]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d007      	beq.n	8001f4e <HAL_RCC_GetSysClockFreq+0x32>
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d008      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x38>
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 80b4 	bne.w	80020b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f48:	4b5e      	ldr	r3, [pc, #376]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f4a:	60bb      	str	r3, [r7, #8]
       break;
 8001f4c:	e0b3      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f4e:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f50:	60bb      	str	r3, [r7, #8]
      break;
 8001f52:	e0b0      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f54:	4b5a      	ldr	r3, [pc, #360]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f5e:	4b58      	ldr	r3, [pc, #352]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d04a      	beq.n	8002000 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f6a:	4b55      	ldr	r3, [pc, #340]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	099b      	lsrs	r3, r3, #6
 8001f70:	f04f 0400 	mov.w	r4, #0
 8001f74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	ea03 0501 	and.w	r5, r3, r1
 8001f80:	ea04 0602 	and.w	r6, r4, r2
 8001f84:	4629      	mov	r1, r5
 8001f86:	4632      	mov	r2, r6
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	f04f 0400 	mov.w	r4, #0
 8001f90:	0154      	lsls	r4, r2, #5
 8001f92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f96:	014b      	lsls	r3, r1, #5
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4622      	mov	r2, r4
 8001f9c:	1b49      	subs	r1, r1, r5
 8001f9e:	eb62 0206 	sbc.w	r2, r2, r6
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	f04f 0400 	mov.w	r4, #0
 8001faa:	0194      	lsls	r4, r2, #6
 8001fac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fb0:	018b      	lsls	r3, r1, #6
 8001fb2:	1a5b      	subs	r3, r3, r1
 8001fb4:	eb64 0402 	sbc.w	r4, r4, r2
 8001fb8:	f04f 0100 	mov.w	r1, #0
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	00e2      	lsls	r2, r4, #3
 8001fc2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fc6:	00d9      	lsls	r1, r3, #3
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4614      	mov	r4, r2
 8001fcc:	195b      	adds	r3, r3, r5
 8001fce:	eb44 0406 	adc.w	r4, r4, r6
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	0262      	lsls	r2, r4, #9
 8001fdc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001fe0:	0259      	lsls	r1, r3, #9
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4614      	mov	r4, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	4621      	mov	r1, r4
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f04f 0400 	mov.w	r4, #0
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	f7fe f8e8 	bl	80001c8 <__aeabi_uldivmod>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	460c      	mov	r4, r1
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	e049      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002000:	4b2f      	ldr	r3, [pc, #188]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	099b      	lsrs	r3, r3, #6
 8002006:	f04f 0400 	mov.w	r4, #0
 800200a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	ea03 0501 	and.w	r5, r3, r1
 8002016:	ea04 0602 	and.w	r6, r4, r2
 800201a:	4629      	mov	r1, r5
 800201c:	4632      	mov	r2, r6
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	f04f 0400 	mov.w	r4, #0
 8002026:	0154      	lsls	r4, r2, #5
 8002028:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800202c:	014b      	lsls	r3, r1, #5
 800202e:	4619      	mov	r1, r3
 8002030:	4622      	mov	r2, r4
 8002032:	1b49      	subs	r1, r1, r5
 8002034:	eb62 0206 	sbc.w	r2, r2, r6
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	f04f 0400 	mov.w	r4, #0
 8002040:	0194      	lsls	r4, r2, #6
 8002042:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002046:	018b      	lsls	r3, r1, #6
 8002048:	1a5b      	subs	r3, r3, r1
 800204a:	eb64 0402 	sbc.w	r4, r4, r2
 800204e:	f04f 0100 	mov.w	r1, #0
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	00e2      	lsls	r2, r4, #3
 8002058:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800205c:	00d9      	lsls	r1, r3, #3
 800205e:	460b      	mov	r3, r1
 8002060:	4614      	mov	r4, r2
 8002062:	195b      	adds	r3, r3, r5
 8002064:	eb44 0406 	adc.w	r4, r4, r6
 8002068:	f04f 0100 	mov.w	r1, #0
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	02a2      	lsls	r2, r4, #10
 8002072:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002076:	0299      	lsls	r1, r3, #10
 8002078:	460b      	mov	r3, r1
 800207a:	4614      	mov	r4, r2
 800207c:	4618      	mov	r0, r3
 800207e:	4621      	mov	r1, r4
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f04f 0400 	mov.w	r4, #0
 8002086:	461a      	mov	r2, r3
 8002088:	4623      	mov	r3, r4
 800208a:	f7fe f89d 	bl	80001c8 <__aeabi_uldivmod>
 800208e:	4603      	mov	r3, r0
 8002090:	460c      	mov	r4, r1
 8002092:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	3301      	adds	r3, #1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ac:	60bb      	str	r3, [r7, #8]
      break;
 80020ae:	e002      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020b2:	60bb      	str	r3, [r7, #8]
      break;
 80020b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b6:	68bb      	ldr	r3, [r7, #8]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c0:	40023800 	.word	0x40023800
 80020c4:	00f42400 	.word	0x00f42400
 80020c8:	007a1200 	.word	0x007a1200

080020cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e01d      	b.n	800211a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7fe fc1e 	bl	8000934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3304      	adds	r3, #4
 8002108:	4619      	mov	r1, r3
 800210a:	4610      	mov	r0, r2
 800210c:	f000 f93a 	bl	8002384 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b02      	cmp	r3, #2
 8002136:	d122      	bne.n	800217e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d11b      	bne.n	800217e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f06f 0202 	mvn.w	r2, #2
 800214e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f8ee 	bl	8002346 <HAL_TIM_IC_CaptureCallback>
 800216a:	e005      	b.n	8002178 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f8e0 	bl	8002332 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f8f1 	bl	800235a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b04      	cmp	r3, #4
 800218a:	d122      	bne.n	80021d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b04      	cmp	r3, #4
 8002198:	d11b      	bne.n	80021d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f06f 0204 	mvn.w	r2, #4
 80021a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f8c4 	bl	8002346 <HAL_TIM_IC_CaptureCallback>
 80021be:	e005      	b.n	80021cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f8b6 	bl	8002332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f8c7 	bl	800235a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d122      	bne.n	8002226 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d11b      	bne.n	8002226 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f06f 0208 	mvn.w	r2, #8
 80021f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2204      	movs	r2, #4
 80021fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f89a 	bl	8002346 <HAL_TIM_IC_CaptureCallback>
 8002212:	e005      	b.n	8002220 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f88c 	bl	8002332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f89d 	bl	800235a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	2b10      	cmp	r3, #16
 8002232:	d122      	bne.n	800227a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b10      	cmp	r3, #16
 8002240:	d11b      	bne.n	800227a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f06f 0210 	mvn.w	r2, #16
 800224a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2208      	movs	r2, #8
 8002250:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f870 	bl	8002346 <HAL_TIM_IC_CaptureCallback>
 8002266:	e005      	b.n	8002274 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f862 	bl	8002332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f873 	bl	800235a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b01      	cmp	r3, #1
 8002286:	d10e      	bne.n	80022a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d107      	bne.n	80022a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f06f 0201 	mvn.w	r2, #1
 800229e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7fe faff 	bl	80008a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b0:	2b80      	cmp	r3, #128	; 0x80
 80022b2:	d10e      	bne.n	80022d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022be:	2b80      	cmp	r3, #128	; 0x80
 80022c0:	d107      	bne.n	80022d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f97f 	bl	80025d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d10e      	bne.n	80022fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d107      	bne.n	80022fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f838 	bl	800236e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	f003 0320 	and.w	r3, r3, #32
 8002308:	2b20      	cmp	r3, #32
 800230a:	d10e      	bne.n	800232a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b20      	cmp	r3, #32
 8002318:	d107      	bne.n	800232a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f06f 0220 	mvn.w	r2, #32
 8002322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f949 	bl	80025bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a40      	ldr	r2, [pc, #256]	; (8002498 <TIM_Base_SetConfig+0x114>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d013      	beq.n	80023c4 <TIM_Base_SetConfig+0x40>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a2:	d00f      	beq.n	80023c4 <TIM_Base_SetConfig+0x40>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a3d      	ldr	r2, [pc, #244]	; (800249c <TIM_Base_SetConfig+0x118>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00b      	beq.n	80023c4 <TIM_Base_SetConfig+0x40>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3c      	ldr	r2, [pc, #240]	; (80024a0 <TIM_Base_SetConfig+0x11c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d007      	beq.n	80023c4 <TIM_Base_SetConfig+0x40>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3b      	ldr	r2, [pc, #236]	; (80024a4 <TIM_Base_SetConfig+0x120>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d003      	beq.n	80023c4 <TIM_Base_SetConfig+0x40>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a3a      	ldr	r2, [pc, #232]	; (80024a8 <TIM_Base_SetConfig+0x124>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d108      	bne.n	80023d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a2f      	ldr	r2, [pc, #188]	; (8002498 <TIM_Base_SetConfig+0x114>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d02b      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e4:	d027      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a2c      	ldr	r2, [pc, #176]	; (800249c <TIM_Base_SetConfig+0x118>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d023      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a2b      	ldr	r2, [pc, #172]	; (80024a0 <TIM_Base_SetConfig+0x11c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01f      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a2a      	ldr	r2, [pc, #168]	; (80024a4 <TIM_Base_SetConfig+0x120>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01b      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a29      	ldr	r2, [pc, #164]	; (80024a8 <TIM_Base_SetConfig+0x124>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d017      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a28      	ldr	r2, [pc, #160]	; (80024ac <TIM_Base_SetConfig+0x128>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a27      	ldr	r2, [pc, #156]	; (80024b0 <TIM_Base_SetConfig+0x12c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00f      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a26      	ldr	r2, [pc, #152]	; (80024b4 <TIM_Base_SetConfig+0x130>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00b      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a25      	ldr	r2, [pc, #148]	; (80024b8 <TIM_Base_SetConfig+0x134>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d007      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a24      	ldr	r2, [pc, #144]	; (80024bc <TIM_Base_SetConfig+0x138>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d003      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a23      	ldr	r2, [pc, #140]	; (80024c0 <TIM_Base_SetConfig+0x13c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d108      	bne.n	8002448 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <TIM_Base_SetConfig+0x114>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d003      	beq.n	800247c <TIM_Base_SetConfig+0xf8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a0c      	ldr	r2, [pc, #48]	; (80024a8 <TIM_Base_SetConfig+0x124>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d103      	bne.n	8002484 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	615a      	str	r2, [r3, #20]
}
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40010000 	.word	0x40010000
 800249c:	40000400 	.word	0x40000400
 80024a0:	40000800 	.word	0x40000800
 80024a4:	40000c00 	.word	0x40000c00
 80024a8:	40010400 	.word	0x40010400
 80024ac:	40014000 	.word	0x40014000
 80024b0:	40014400 	.word	0x40014400
 80024b4:	40014800 	.word	0x40014800
 80024b8:	40001800 	.word	0x40001800
 80024bc:	40001c00 	.word	0x40001c00
 80024c0:	40002000 	.word	0x40002000

080024c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024d8:	2302      	movs	r3, #2
 80024da:	e05a      	b.n	8002592 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a21      	ldr	r2, [pc, #132]	; (80025a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d022      	beq.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002528:	d01d      	beq.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1d      	ldr	r2, [pc, #116]	; (80025a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d018      	beq.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1b      	ldr	r2, [pc, #108]	; (80025a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1a      	ldr	r2, [pc, #104]	; (80025ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00e      	beq.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a18      	ldr	r2, [pc, #96]	; (80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d009      	beq.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d004      	beq.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a15      	ldr	r2, [pc, #84]	; (80025b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d10c      	bne.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800256c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	4313      	orrs	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40010000 	.word	0x40010000
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40000800 	.word	0x40000800
 80025ac:	40000c00 	.word	0x40000c00
 80025b0:	40010400 	.word	0x40010400
 80025b4:	40014000 	.word	0x40014000
 80025b8:	40001800 	.word	0x40001800

080025bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <__libc_init_array>:
 80025e4:	b570      	push	{r4, r5, r6, lr}
 80025e6:	4e0d      	ldr	r6, [pc, #52]	; (800261c <__libc_init_array+0x38>)
 80025e8:	4c0d      	ldr	r4, [pc, #52]	; (8002620 <__libc_init_array+0x3c>)
 80025ea:	1ba4      	subs	r4, r4, r6
 80025ec:	10a4      	asrs	r4, r4, #2
 80025ee:	2500      	movs	r5, #0
 80025f0:	42a5      	cmp	r5, r4
 80025f2:	d109      	bne.n	8002608 <__libc_init_array+0x24>
 80025f4:	4e0b      	ldr	r6, [pc, #44]	; (8002624 <__libc_init_array+0x40>)
 80025f6:	4c0c      	ldr	r4, [pc, #48]	; (8002628 <__libc_init_array+0x44>)
 80025f8:	f000 f820 	bl	800263c <_init>
 80025fc:	1ba4      	subs	r4, r4, r6
 80025fe:	10a4      	asrs	r4, r4, #2
 8002600:	2500      	movs	r5, #0
 8002602:	42a5      	cmp	r5, r4
 8002604:	d105      	bne.n	8002612 <__libc_init_array+0x2e>
 8002606:	bd70      	pop	{r4, r5, r6, pc}
 8002608:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800260c:	4798      	blx	r3
 800260e:	3501      	adds	r5, #1
 8002610:	e7ee      	b.n	80025f0 <__libc_init_array+0xc>
 8002612:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002616:	4798      	blx	r3
 8002618:	3501      	adds	r5, #1
 800261a:	e7f2      	b.n	8002602 <__libc_init_array+0x1e>
 800261c:	08002674 	.word	0x08002674
 8002620:	08002674 	.word	0x08002674
 8002624:	08002674 	.word	0x08002674
 8002628:	08002678 	.word	0x08002678

0800262c <memset>:
 800262c:	4402      	add	r2, r0
 800262e:	4603      	mov	r3, r0
 8002630:	4293      	cmp	r3, r2
 8002632:	d100      	bne.n	8002636 <memset+0xa>
 8002634:	4770      	bx	lr
 8002636:	f803 1b01 	strb.w	r1, [r3], #1
 800263a:	e7f9      	b.n	8002630 <memset+0x4>

0800263c <_init>:
 800263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263e:	bf00      	nop
 8002640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002642:	bc08      	pop	{r3}
 8002644:	469e      	mov	lr, r3
 8002646:	4770      	bx	lr

08002648 <_fini>:
 8002648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264a:	bf00      	nop
 800264c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264e:	bc08      	pop	{r3}
 8002650:	469e      	mov	lr, r3
 8002652:	4770      	bx	lr
